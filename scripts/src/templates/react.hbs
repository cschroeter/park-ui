import type { Assign } from '@ark-ui/react'
import { {{pascalcase component}} } from '@ark-ui/react/{{component}}'
import { type {{pascalcase component}}VariantProps, {{recipe}} } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'
import { createStyleContext } from '~/lib/create-style-context'

{{#if usesRootProvider}}
const { withRootProvider, withContext } = createStyleContext({{recipe}})
{{else}}
const { withProvider, withContext } = createStyleContext({{recipe}})
{{/if}}

{{#each parts}}
{{#if this.isProvider}}
export type {{this.name}}Props = ComponentProps<typeof {{this.name}}>
{{#if this.html}}
export const {{this.name}} = withProvider<
  {{this.html}},
  Assign<Assign<HTMLStyledProps<'{{this.tag}}'>, {{pascalcase ../component}}.{{this.name}}BaseProps>, {{pascalcase ../component}}VariantProps>
>({{pascalcase ../component}}.{{this.name}}, '{{this.slot}}')
{{else}}
export const {{this.name}} = withRootProvider<Assign<{{pascalcase ../component}}.{{this.name}}BaseProps, {{pascalcase ../component}}VariantProps>>({{pascalcase ../component}}.{{this.name}})
{{/if}}
{{else}}
{{#if this.slot}}
export const {{this.name}} = withContext<
  {{this.html}},
  Assign<HTMLStyledProps<'{{this.tag}}'>, {{pascalcase ../component}}.{{this.name}}BaseProps>
>({{pascalcase ../component}}.{{this.name}}, '{{this.slot}}')
{{/if}}
{{/if}}

{{/each}}
export {
  {{pascalcase component}}Context as Context,
{{#each parts}}
{{#not this.slot}}
  {{pascalcase ../component}}{{this.name}} as {{this.name}},
{{/not}}
{{/each}}
} from '@ark-ui/react/{{component}}'
