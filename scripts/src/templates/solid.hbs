import { {{pascalcase component}}, type Assign } from '@ark-ui/solid'
import type { ComponentProps } from 'solid-js'
import { {{recipe}} } from 'styled-system/recipes'
import type { HTMLStyledProps } from 'styled-system/types'
import { createStyleContext } from '~/lib/create-style-context'

{{#if usesRootProvider}}
const { withRootProvider, withContext } = createStyleContext({{recipe}})
{{else}}
const { withProvider, withContext } = createStyleContext({{recipe}})
{{/if}}

{{#each parts}}
{{#if this.isProvider}}
export type {{this.name}}Props = ComponentProps<typeof {{this.name}}>
{{#if this.html}}
export const {{this.name}} = withProvider<
  Assign<HTMLStyledProps<'{{this.tag}}'>, {{pascalcase ../component}}.{{this.name}}Props>
>({{pascalcase ../component}}.{{this.name}}, '{{this.slot}}')
{{else}}
export const {{this.name}} = withRootProvider<{{pascalcase ../component}}.{{this.name}}Props>({{pascalcase ../component}}.{{this.name}})
{{/if}}
{{else}}
{{#if this.slot}}
export type {{this.name}}Props = ComponentProps<typeof {{this.name}}>
export const {{this.name}} = withContext<
  Assign<HTMLStyledProps<'{{this.tag}}'>, {{pascalcase ../component}}.{{this.name}}Props>
>({{pascalcase ../component}}.{{this.name}}, '{{this.slot}}')
{{/if}}
{{/if}}

{{/each}}
export {
  {{pascalcase component}}Context as Context,
  type {{pascalcase component}}ContextProps as ContextProps,
{{#each parts}}
{{#not this.slot}}
  {{pascalcase ../component}}{{this.name}} as {{this.name}},
  type {{pascalcase ../component}}{{this.name}}Props as {{this.name}}Props,
{{/not}}
{{/each}}
} from '@ark-ui/solid'
