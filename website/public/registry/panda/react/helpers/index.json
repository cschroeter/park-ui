{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import {\n  createContext,\n  createElement,\n  forwardRef,\n  useContext,\n  type ComponentProps,\n  type ElementType,\n  type JSX,\n} from 'react'\n\ntype GenericProps = Record<string, unknown>\ntype StyleRecipe = {\n  (props?: GenericProps): Record<string, string>\n  splitVariantProps: (props: GenericProps) => any\n}\ntype StyleSlot<R extends StyleRecipe> = keyof ReturnType<R>\ntype StyleSlotRecipe<R extends StyleRecipe> = Record<StyleSlot<R>, string>\ntype StyleVariantProps<R extends StyleRecipe> = Parameters<R>[0]\ntype CombineProps<T, U> = Omit<T, keyof U> & U\n\nconst cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')\n\nexport interface ComponentVariants<T extends ElementType, R extends StyleRecipe> {\n  (props: CombineProps<ComponentProps<T>, StyleVariantProps<R>>): JSX.Element\n}\n\nexport const createStyleContext = <R extends StyleRecipe>(recipe: R) => {\n  const StyleContext = createContext<StyleSlotRecipe<R> | null>(null)\n\n  const withProvider = <T extends ElementType>(\n    Component: T,\n    slot?: StyleSlot<R>,\n  ): ComponentVariants<T, R> => {\n    const StyledComponent = forwardRef((props: ComponentProps<T>, ref) => {\n      const [variantProps, otherProps] = recipe.splitVariantProps(props)\n      const slotStyles = recipe(variantProps) as StyleSlotRecipe<R>\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Component\n            ref={ref}\n            {...otherProps}\n            className={cx(slotStyles[slot ?? ''], otherProps.className)}\n          />\n        </StyleContext.Provider>\n      )\n    })\n    return StyledComponent as unknown as ComponentVariants<T, R>\n  }\n\n  const withContext = <T extends ElementType>(Component: T, slot?: StyleSlot<R>): T => {\n    if (!slot) return Component\n    const StyledComponent = forwardRef((props: ComponentProps<T>, ref) => {\n      const slotStyles = useContext(StyleContext)\n      return createElement(Component, {\n        ...props,\n        className: cx(slotStyles?.[slot ?? ''], props.className),\n        ref,\n      })\n    })\n    return StyledComponent as unknown as T\n  }\n\n  return {\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
