{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import {\n  type ElementType,\n  type ForwardRefExoticComponent,\n  type PropsWithoutRef,\n  type RefAttributes,\n  createContext,\n  forwardRef,\n  useContext,\n} from 'react'\nimport { cx } from 'styled-system/css'\nimport { styled } from 'styled-system/jsx'\n\ntype Props = Record<string, unknown>\ntype Recipe = {\n  (props?: Props): Props\n  splitVariantProps: (props: Props) => [Props, Props]\n}\ntype Slot<R extends Recipe> = keyof ReturnType<R>\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<Record<Slot<R>, string> | null>(null)\n\n  const withRootProvider = <P extends {}>(Component: ElementType) => {\n    const StyledComponent = (props: P) => {\n      const [variantProps, otherProps] = recipe.splitVariantProps(props)\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Component {...otherProps} />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withProvider = <T, P extends { className?: string }>(\n    Component: ElementType,\n    slot: Slot<R>,\n  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> => {\n    const StyledComponent = styled(Component)\n    return forwardRef<T, P>((props, ref) => {\n      const [variantProps, otherProps] = recipe.splitVariantProps(props)\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <StyledComponent\n            {...otherProps}\n            ref={ref}\n            className={cx(slotStyles?.[slot], props.className)}\n          />\n        </StyleContext.Provider>\n      )\n    })\n  }\n\n  const withContext = <T, P extends { className?: string }>(\n    Component: ElementType,\n    slot: Slot<R>,\n  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> => {\n    const StyledComponent = styled(Component)\n    return forwardRef<T, P>((props, ref) => {\n      const slotStyles = useContext(StyleContext)\n      return (\n        <StyledComponent {...props} ref={ref} className={cx(slotStyles?.[slot], props.className)} />\n      )\n    })\n  }\n\n  return {\n    withRootProvider,\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
