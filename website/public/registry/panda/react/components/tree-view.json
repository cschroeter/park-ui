{
  "files": [
    {
      "filename": "tree-view.tsx",
      "content": "import type { Assign } from '@ark-ui/react'\nimport { TreeView as ArkTreeView, type TreeViewRootProps } from '@ark-ui/react/tree-view'\nimport { forwardRef } from 'react'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { type TreeViewVariantProps, treeView } from 'styled-system/recipes'\nimport type { JsxStyleProps } from 'styled-system/types'\n\ninterface Child {\n  value: string\n  name: string\n  children?: Child[]\n}\n\nexport interface TreeViewData {\n  label: string\n  children: Child[]\n}\n\nexport interface TreeViewProps\n  extends Assign<JsxStyleProps, TreeViewRootProps>,\n    TreeViewVariantProps {\n  data: TreeViewData\n}\n\nexport const TreeView = forwardRef<HTMLDivElement, TreeViewProps>((props, ref) => {\n  const [cssProps, localProps] = splitCssProps(props)\n  const { data, className, ...rootProps } = localProps\n  const styles = treeView()\n\n  const renderChild = (child: Child) => (\n    <ArkTreeView.Branch key={child.value} value={child.value} className={styles.branch}>\n      <ArkTreeView.BranchControl className={styles.branchControl}>\n        <ArkTreeView.BranchIndicator className={styles.branchIndicator}>\n          <ChevronRightIcon />\n        </ArkTreeView.BranchIndicator>\n        <ArkTreeView.BranchText className={styles.branchText}>{child.name}</ArkTreeView.BranchText>\n      </ArkTreeView.BranchControl>\n      <ArkTreeView.BranchContent className={styles.branchContent}>\n        {child.children?.map((child) =>\n          child.children ? (\n            renderChild(child)\n          ) : (\n            <ArkTreeView.Item key={child.value} value={child.value} className={styles.item}>\n              <ArkTreeView.ItemText className={styles.itemText}>{child.name}</ArkTreeView.ItemText>\n            </ArkTreeView.Item>\n          ),\n        )}\n      </ArkTreeView.BranchContent>\n    </ArkTreeView.Branch>\n  )\n\n  return (\n    <ArkTreeView.Root\n      ref={ref}\n      aria-label={data.label}\n      className={cx(styles.root, css(cssProps), className)}\n      {...rootProps}\n    >\n      <ArkTreeView.Tree className={styles.tree}>{data.children.map(renderChild)}</ArkTreeView.Tree>\n    </ArkTreeView.Root>\n  )\n})\n\nTreeView.displayName = 'TreeView'\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right Icon</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
