{
  "files": [
    {
      "filename": "pin-input.tsx",
      "content": "import {\n  PinInput as ArkPinInput,\n  type PinInputProps as ArkPinInputProps,\n} from '@ark-ui/react/pin-input'\nimport { forwardRef, type ReactNode } from 'react'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { pinInput, type PinInputVariantProps } from 'styled-system/recipes'\nimport type { Assign, HTMLStyledProps } from 'styled-system/types'\nimport { Input } from '~/components/ui/input'\n\nexport interface PinInputProps\n  extends Assign<ArkPinInputProps, HTMLStyledProps<'div'>>,\n    PinInputVariantProps {\n  children?: ReactNode\n  /**\n   * The number of inputs to render.\n   * @default 4\n   */\n  length?: number\n}\n\nexport const PinInput = forwardRef<HTMLDivElement, PinInputProps>((props, ref) => {\n  const { children, length = 4, ...rest } = props\n  const [variantProps] = pinInput.splitVariantProps(rest)\n  const [cssProps, rooProps] = splitCssProps(rest)\n  const styles = pinInput(variantProps)\n\n  return (\n    <ArkPinInput.Root ref={ref} className={cx(styles.root, css(cssProps))} {...rooProps}>\n      {children && <ArkPinInput.Label className={styles.label}>{children}</ArkPinInput.Label>}\n      <ArkPinInput.Control className={styles.control}>\n        {Array.from({ length }, (_, index) => index).map((id, index) => (\n          <ArkPinInput.Input className={styles.input} key={id} index={index} asChild>\n            {/* Attention: this only works with static css for inputs */}\n            <Input size={variantProps.size} />\n          </ArkPinInput.Input>\n        ))}\n      </ArkPinInput.Control>\n    </ArkPinInput.Root>\n  )\n})\n\nPinInput.displayName = 'PinInput'\n",
      "hasMultipleParts": false
    }
  ]
}
