{
  "files": [
    {
      "filename": "color-picker.tsx",
      "content": "import type { Assign } from '@ark-ui/react'\nimport { ColorPicker } from '@ark-ui/react/color-picker'\nimport { type ColorPickerVariantProps, colorPicker } from 'styled-system/recipes'\nimport type { JsxStyleProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(colorPicker)\n\nexport interface RootProps\n  extends Assign<JsxStyleProps, ColorPicker.RootProps>,\n    ColorPickerVariantProps {}\nexport const Root = withProvider<HTMLDivElement, RootProps>(ColorPicker.Root, 'root')\n\nexport const AreaBackground = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.AreaBackgroundProps>\n>(ColorPicker.AreaBackground, 'areaBackground')\n\nexport const Area = withContext<HTMLDivElement, Assign<JsxStyleProps, ColorPicker.AreaProps>>(\n  ColorPicker.Area,\n  'area',\n)\n\nexport const AreaThumb = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.AreaThumbProps>\n>(ColorPicker.AreaThumb, 'areaThumb')\n\nexport const ChannelInput = withContext<\n  HTMLInputElement,\n  Assign<JsxStyleProps, ColorPicker.ChannelInputProps>\n>(ColorPicker.ChannelInput, 'channelInput')\n\nexport const ChannelSlider = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.ChannelSliderProps>\n>(ColorPicker.ChannelSlider, 'channelSlider')\n\nexport const ChannelSliderThumb = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.ChannelSliderThumbProps>\n>(ColorPicker.ChannelSliderThumb, 'channelSliderThumb')\n\nexport const ChannelSliderTrack = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.ChannelSliderTrackProps>\n>(ColorPicker.ChannelSliderTrack, 'channelSliderTrack')\n\nexport const Content = withContext<HTMLDivElement, Assign<JsxStyleProps, ColorPicker.ContentProps>>(\n  ColorPicker.Content,\n  'content',\n)\n\nexport const Control = withContext<HTMLDivElement, Assign<JsxStyleProps, ColorPicker.ControlProps>>(\n  ColorPicker.Control,\n  'control',\n)\n\nexport const EyeDropperTrigger = withContext<\n  HTMLButtonElement,\n  Assign<JsxStyleProps, ColorPicker.EyeDropperTriggerProps>\n>(ColorPicker.EyeDropperTrigger, 'eyeDropperTrigger')\n\nexport const FormatSelect = withContext<\n  HTMLSelectElement,\n  Assign<JsxStyleProps, ColorPicker.FormatSelectProps>\n>(ColorPicker.FormatSelect, 'formatSelect')\n\nexport const FormatTrigger = withContext<\n  HTMLButtonElement,\n  Assign<JsxStyleProps, ColorPicker.FormatTriggerProps>\n>(ColorPicker.FormatTrigger, 'formatTrigger')\n\nexport const Label = withContext<HTMLLabelElement, Assign<JsxStyleProps, ColorPicker.LabelProps>>(\n  ColorPicker.Label,\n  'label',\n)\n\nexport const Positioner = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.PositionerProps>\n>(ColorPicker.Positioner, 'positioner')\n\nexport const SwatchGroup = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.SwatchGroupProps>\n>(ColorPicker.SwatchGroup, 'swatchGroup')\n\nexport const SwatchIndicator = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.SwatchIndicatorProps>\n>(ColorPicker.SwatchIndicator, 'swatchIndicator')\n\nexport const Swatch = withContext<HTMLDivElement, Assign<JsxStyleProps, ColorPicker.SwatchProps>>(\n  ColorPicker.Swatch,\n  'swatch',\n)\n\nexport const SwatchTrigger = withContext<\n  HTMLButtonElement,\n  Assign<JsxStyleProps, ColorPicker.SwatchTriggerProps>\n>(ColorPicker.SwatchTrigger, 'swatchTrigger')\n\nexport const TransparencyGrid = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.TransparencyGridProps>\n>(ColorPicker.TransparencyGrid, 'transparencyGrid')\n\nexport const Trigger = withContext<\n  HTMLButtonElement,\n  Assign<JsxStyleProps, ColorPicker.TriggerProps>\n>(ColorPicker.Trigger, 'trigger')\n\nexport const ValueText = withContext<\n  HTMLDivElement,\n  Assign<JsxStyleProps, ColorPicker.ValueTextProps>\n>(ColorPicker.ValueText, 'valueText')\n\nexport const View = withContext<HTMLDivElement, Assign<JsxStyleProps, ColorPicker.ViewProps>>(\n  ColorPicker.View,\n  'view',\n)\n\nexport {\n  ColorPickerContext as Context,\n  ColorPickerHiddenInput as HiddenInput,\n  type ColorPickerContextProps as ContextProps,\n  type ColorPickerHiddenInputProps as HiddenInputProps,\n} from '@ark-ui/react/color-picker'\n",
      "hasMultipleParts": true
    }
  ]
}
