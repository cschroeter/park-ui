{
  "files": [
    {
      "filename": "pagination.tsx",
      "content": "import {\n  Pagination as ArkPagination,\n  type PaginationProps as ArkPaginationProps,\n} from '@ark-ui/react/pagination'\nimport { forwardRef } from 'react'\nimport { pagination, type PaginationVariantProps } from 'styled-system/recipes'\nimport type { Assign, HTMLStyledProps } from 'styled-system/types'\nimport { Button } from '~/components/ui/button'\nimport { IconButton } from '~/components/ui/icon-button'\n\nexport interface PaginationProps\n  extends Assign<HTMLStyledProps<'nav'>, ArkPaginationProps>,\n    PaginationVariantProps {}\n\nexport const Pagination = forwardRef<HTMLElement, PaginationProps>((props, ref) => {\n  const [variantProps, localProps] = pagination.splitVariantProps(props)\n  const styles = pagination(variantProps)\n\n  return (\n    <ArkPagination.Root ref={ref} className={styles.root} {...localProps}>\n      {({ pages }) => (\n        <>\n          <ArkPagination.PrevTrigger className={styles.prevTrigger} asChild>\n            <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n              <ChevronLeftIcon />\n            </IconButton>\n          </ArkPagination.PrevTrigger>\n          {pages.map((page, index) =>\n            page.type === 'page' ? (\n              <ArkPagination.Item className={styles.item} key={index} {...page} asChild>\n                <Button variant=\"outline\">{page.value}</Button>\n              </ArkPagination.Item>\n            ) : (\n              <ArkPagination.Ellipsis className={styles.ellipsis} key={index} index={index}>\n                &#8230;\n              </ArkPagination.Ellipsis>\n            ),\n          )}\n          <ArkPagination.NextTrigger className={styles.nextTrigger} asChild>\n            <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n              <ChevronRightIcon />\n            </IconButton>\n          </ArkPagination.NextTrigger>\n        </>\n      )}\n    </ArkPagination.Root>\n  )\n})\n\nPagination.displayName = 'Pagination'\n\nconst ChevronLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m15 18l-6-6l6-6\"\n    />\n  </svg>\n)\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
