{
  "files": [
    {
      "filename": "text.tsx",
      "content": "import React from 'react'\nimport type { TextVariantProps } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\n\ntype PolymorphicRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref']\n\ntype AsProp<C extends React.ElementType> = {\n  as?: C\n}\n\ntype PropsToOmit<C extends React.ElementType, P> = keyof (AsProp<C> & P)\n\ntype PolymorphicComponentProp<C extends React.ElementType, Props = {}> = React.PropsWithChildren<\n  Props & AsProp<C>\n> &\n  Omit<React.ComponentPropsWithoutRef<C>, PropsToOmit<C, Props>>\n\ntype PolymorphicComponentPropWithRef<\n  C extends React.ElementType,\n  Props = {},\n> = PolymorphicComponentProp<C, Props> & { ref?: PolymorphicRef<C> }\n\nexport type TextProps<C extends React.ElementType> = PolymorphicComponentPropWithRef<\n  C,\n  HTMLStyledProps<C> & TextVariantProps\n>\n\ntype PolymorphicComponent = <C extends React.ElementType = 'p'>(\n  props: TextProps<C>,\n) => React.ReactNode | null\n\nexport const Text: PolymorphicComponent = React.forwardRef(\n  <C extends React.ElementType = 'p'>(props: TextProps<C>, ref?: PolymorphicRef<C>) => {\n    const { as, ...textProps } = props\n    const Component = as || 'p'\n\n    return <Component ref={ref} {...textProps} />\n  },\n)\n",
      "hasMultipleParts": false
    }
  ]
}
