{
  "files": [
    {
      "filename": "slider.tsx",
      "content": "import type { Assign } from '@ark-ui/react'\nimport { Slider as ArkSlider, type SliderRootProps } from '@ark-ui/react/slider'\nimport { type ReactNode, forwardRef } from 'react'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { type SliderVariantProps, slider } from 'styled-system/recipes'\nimport type { JsxStyleProps } from 'styled-system/types'\n\nexport interface SliderProps extends Assign<JsxStyleProps, SliderRootProps>, SliderVariantProps {\n  marks?: {\n    value: number\n    label?: ReactNode\n  }[]\n}\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n  const [variantProps, sliderProps] = slider.splitVariantProps(props)\n  const [cssProps, localProps] = splitCssProps(sliderProps)\n  const { children, className, ...rootProps } = localProps\n  const styles = slider(variantProps)\n\n  return (\n    <ArkSlider.Root ref={ref} className={cx(styles.root, css(cssProps), className)} {...rootProps}>\n      <ArkSlider.Context>\n        {(api) => (\n          <>\n            {children && <ArkSlider.Label className={styles.label}>{children}</ArkSlider.Label>}\n            <ArkSlider.Control className={styles.control}>\n              <ArkSlider.Track className={styles.track}>\n                <ArkSlider.Range className={styles.range} />\n              </ArkSlider.Track>\n              {api.value.map((_, index) => (\n                <ArkSlider.Thumb key={index} index={index} className={styles.thumb} />\n              ))}\n            </ArkSlider.Control>\n            {props.marks && (\n              <ArkSlider.MarkerGroup className={styles.markerGroup}>\n                {props.marks.map((mark) => (\n                  <ArkSlider.Marker key={mark.value} value={mark.value} className={styles.marker}>\n                    {mark.label}\n                  </ArkSlider.Marker>\n                ))}\n              </ArkSlider.MarkerGroup>\n            )}\n          </>\n        )}\n      </ArkSlider.Context>\n    </ArkSlider.Root>\n  )\n})\n\nSlider.displayName = 'Slider'\n",
      "hasMultipleParts": false
    }
  ]
}
