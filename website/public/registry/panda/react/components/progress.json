{
  "files": [
    {
      "filename": "progress.tsx",
      "content": "import { Progress as ArkProgress, type ProgressRootProps } from '@ark-ui/react/progress'\nimport { forwardRef, type ReactNode } from 'react'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { progress, type ProgressVariantProps } from 'styled-system/recipes'\nimport type { Assign, JsxStyleProps } from 'styled-system/types'\n\nexport interface ProgressProps\n  extends Assign<JsxStyleProps, ProgressRootProps>,\n    ProgressVariantProps {\n  children?: ReactNode\n  /**\n   * The type of progress to render.\n   * @default linear\n   */\n  type?: 'linear' | 'circular'\n}\n\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {\n  const [variantProps, progressProps] = progress.splitVariantProps(props)\n  const [cssProps, localProps] = splitCssProps(progressProps)\n  const { children, className, type = 'linear', ...rootProps } = localProps\n  const styles = progress(variantProps)\n\n  return (\n    <ArkProgress.Root\n      ref={ref}\n      className={cx(styles.root, css(cssProps), className)}\n      {...rootProps}\n    >\n      {children && <ArkProgress.Label className={styles.label}>{children}</ArkProgress.Label>}\n      {type === 'linear' && (\n        <ArkProgress.Track className={styles.track}>\n          <ArkProgress.Range className={styles.range} />\n        </ArkProgress.Track>\n      )}\n      {type === 'circular' && (\n        <ArkProgress.Circle className={styles.circle}>\n          <ArkProgress.CircleTrack className={styles.circleTrack} />\n          <ArkProgress.CircleRange className={styles.circleRange} />\n          <ArkProgress.ValueText className={styles.valueText} />\n        </ArkProgress.Circle>\n      )}\n      <ArkProgress.ValueText className={styles.valueText} />\n    </ArkProgress.Root>\n  )\n})\n\nProgress.displayName = 'Progress'\n",
      "hasMultipleParts": false
    }
  ]
}
