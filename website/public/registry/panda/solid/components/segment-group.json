{
  "files": [
    {
      "filename": "segment-group.tsx",
      "content": "import { type Assign, SegmentGroup } from '@ark-ui/solid'\nimport { type SegmentGroupVariantProps, segmentGroup } from 'styled-system/recipes'\nimport type { JsxStyleProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(segmentGroup)\n\nexport interface RootProps\n  extends Assign<JsxStyleProps, SegmentGroup.RootProps>,\n    SegmentGroupVariantProps {}\nexport const Root = withProvider<RootProps>(SegmentGroup.Root, 'root')\n\nexport const Indicator = withContext<Assign<JsxStyleProps, SegmentGroup.IndicatorProps>>(\n  SegmentGroup.Indicator,\n  'indicator',\n)\n\nexport const ItemControl = withContext<Assign<JsxStyleProps, SegmentGroup.ItemControlProps>>(\n  SegmentGroup.ItemControl,\n  'itemControl',\n)\n\nexport const Item = withContext<Assign<JsxStyleProps, SegmentGroup.ItemProps>>(\n  SegmentGroup.Item,\n  'item',\n)\n\nexport const ItemText = withContext<Assign<JsxStyleProps, SegmentGroup.ItemTextProps>>(\n  SegmentGroup.ItemText,\n  'itemText',\n)\n\nexport const Label = withContext<Assign<JsxStyleProps, SegmentGroup.LabelProps>>(\n  SegmentGroup.Label,\n  'label',\n)\n\nexport {\n  SegmentGroupContext as Context,\n  type SegmentGroupContextProps as ContextProps,\n} from '@ark-ui/solid'\n",
      "hasMultipleParts": true
    }
  ]
}
