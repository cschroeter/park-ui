{
  "files": [
    {
      "filename": "pin-input.tsx",
      "content": "import { PinInput as ArkPinInput, type PinInputProps as ArkPinInputProps } from '@ark-ui/solid'\nimport { Index, Show, children, splitProps, type JSX } from 'solid-js'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { pinInput, type PinInputVariantProps } from 'styled-system/recipes'\nimport type { Assign, HTMLStyledProps } from 'styled-system/types'\nimport { Input } from '~/components/ui/input'\n\nexport interface PinInputProps\n  extends Assign<ArkPinInputProps, HTMLStyledProps<'div'>>,\n    PinInputVariantProps {\n  children?: JSX.Element\n  /**\n   * The number of inputs to render.\n   * @default 4\n   */\n  length?: number\n}\n\nexport const PinInput = (props: PinInputProps) => {\n  const [localProps, restProps] = splitProps(props, ['children', 'length'])\n  const [variantProps] = pinInput.splitVariantProps(props)\n  const [cssProps, rootProps] = splitCssProps(restProps)\n  const getChildren = children(() => localProps.children)\n  const styles = pinInput(variantProps)\n\n  return (\n    <ArkPinInput.Root class={cx(styles.root, css(cssProps))} {...rootProps}>\n      <Show when={getChildren()}>\n        <ArkPinInput.Label class={styles.label}>{getChildren()}</ArkPinInput.Label>\n      </Show>\n      <ArkPinInput.Control class={styles.control}>\n        <Index each={Array.from({ length: localProps.length ?? 4 }, (_, index) => index)}>\n          {(index) => (\n            <ArkPinInput.Input class={styles.input} index={index()} asChild>\n              {/* Attention: this only works with static css for inputs */}\n              <Input size={variantProps.size} />\n            </ArkPinInput.Input>\n          )}\n        </Index>\n      </ArkPinInput.Control>\n    </ArkPinInput.Root>\n  )\n}\n\nPinInput.displayName = 'PinInput'\n",
      "hasMultipleParts": false
    }
  ]
}
