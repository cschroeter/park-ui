{
  "files": [
    {
      "filename": "select.tsx",
      "content": "import { Select as ArkSelect } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { styled } from 'styled-system/jsx'\nimport { select } from 'styled-system/recipes'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(select)\n\nconst Select = withProvider(styled(ArkSelect.Root), 'root')\nconst SelectClearTrigger = withContext(styled(ArkSelect.ClearTrigger), 'clearTrigger')\nconst SelectContent = withContext(styled(ArkSelect.Content), 'content')\nconst SelectControl = withContext(styled(ArkSelect.Control), 'control')\nconst SelectIndicator = withContext(styled(ArkSelect.Indicator), 'indicator')\nconst SelectItem = withContext(styled(ArkSelect.Item), 'item')\nconst SelectItemGroup = withContext(styled(ArkSelect.ItemGroup), 'itemGroup')\nconst SelectItemGroupLabel = withContext(styled(ArkSelect.ItemGroupLabel), 'itemGroupLabel')\nconst SelectItemIndicator = withContext(styled(ArkSelect.ItemIndicator), 'itemIndicator')\nconst SelectItemText = withContext(styled(ArkSelect.ItemText), 'itemText')\nconst SelectLabel = withContext(styled(ArkSelect.Label), 'label')\nconst SelectPositioner = withContext(styled(ArkSelect.Positioner), 'positioner')\nconst SelectTrigger = withContext(styled(ArkSelect.Trigger), 'trigger')\nconst SelectValueText = withContext(styled(ArkSelect.ValueText), 'valueText')\n\nconst Root = Select\nconst ClearTrigger = SelectClearTrigger\nconst Content = SelectContent\nconst Control = SelectControl\nconst Indicator = SelectIndicator\nconst Item = SelectItem\nconst ItemGroup = SelectItemGroup\nconst ItemGroupLabel = SelectItemGroupLabel\nconst ItemIndicator = SelectItemIndicator\nconst ItemText = SelectItemText\nconst Label = SelectLabel\nconst Positioner = SelectPositioner\nconst Trigger = SelectTrigger\nconst ValueText = SelectValueText\n\nexport {\n  ClearTrigger,\n  Content,\n  Control,\n  Indicator,\n  Item,\n  ItemGroup,\n  ItemGroupLabel,\n  ItemIndicator,\n  ItemText,\n  Label,\n  Positioner,\n  Root,\n  Select,\n  SelectClearTrigger,\n  SelectContent,\n  SelectControl,\n  SelectIndicator,\n  SelectItem,\n  SelectItemGroup,\n  SelectItemGroupLabel,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPositioner,\n  SelectTrigger,\n  SelectValueText,\n  Trigger,\n  ValueText,\n}\n\nexport interface SelectProps extends ComponentProps<typeof Select> {}\nexport interface SelectClearTriggerProps extends ComponentProps<typeof SelectClearTrigger> {}\nexport interface SelectContentProps extends ComponentProps<typeof SelectContent> {}\nexport interface SelectControlProps extends ComponentProps<typeof SelectControl> {}\nexport interface SelectIndicatorProps extends ComponentProps<typeof SelectIndicator> {}\nexport interface SelectItemProps extends ComponentProps<typeof SelectItem> {}\nexport interface SelectItemGroupProps extends ComponentProps<typeof SelectItemGroup> {}\nexport interface SelectItemGroupLabelProps extends ComponentProps<typeof SelectItemGroupLabel> {}\nexport interface SelectItemIndicatorProps extends ComponentProps<typeof SelectItemIndicator> {}\nexport interface SelectItemTextProps extends ComponentProps<typeof SelectItemText> {}\nexport interface SelectLabelProps extends ComponentProps<typeof SelectLabel> {}\nexport interface SelectPositionerProps extends ComponentProps<typeof SelectPositioner> {}\nexport interface SelectTriggerProps extends ComponentProps<typeof SelectTrigger> {}\nexport interface SelectValueTextProps extends ComponentProps<typeof SelectValueText> {}\n",
      "hasMultipleParts": true
    }
  ]
}
