{
  "files": [
    {
      "filename": "tree-view.tsx",
      "content": "import { TreeView as ArkTreeView, type TreeViewRootProps } from '@ark-ui/solid'\nimport { ChevronRightIcon } from 'lucide-solid'\nimport { type Accessor, Index, Show, splitProps } from 'solid-js'\nimport { css, cx } from 'styled-system/css'\nimport { splitCssProps } from 'styled-system/jsx'\nimport { treeView } from 'styled-system/recipes'\nimport type { Assign, JsxStyleProps } from 'styled-system/types'\n\ninterface Child {\n  id: string\n  name: string\n  children?: Child[]\n}\n\nexport interface TreeViewData {\n  label: string\n  children: Child[]\n}\n\nexport interface TreeViewProps extends Assign<JsxStyleProps, TreeViewRootProps> {\n  data: TreeViewData\n}\n\nexport const TreeView = (props: TreeViewProps) => {\n  const [cssProps, treeViewProps] = splitCssProps(props)\n  const [localProps, rootProps] = splitProps(treeViewProps, ['data', 'class'])\n  const styles = treeView()\n\n  const renderChild = (child: Accessor<Child>) => (\n    <ArkTreeView.Branch id={child().id} class={styles.branch}>\n      <ArkTreeView.BranchControl class={styles.branchControl}>\n        <ArkTreeView.BranchIndicator class={styles.branchIndicator}>\n          <ChevronRightIcon />\n        </ArkTreeView.BranchIndicator>\n        <ArkTreeView.BranchText class={styles.branchText}>{child.name}</ArkTreeView.BranchText>\n      </ArkTreeView.BranchControl>\n      <ArkTreeView.BranchContent class={styles.branchContent}>\n        <Show\n          when={child().children}\n          fallback={\n            <ArkTreeView.Item id={child().id} class={styles.item}>\n              <ArkTreeView.ItemText class={styles.itemText}>{child.name}</ArkTreeView.ItemText>\n            </ArkTreeView.Item>\n          }\n        >\n          <Index each={child().children}>{(child) => renderChild(child)}</Index>\n        </Show>\n      </ArkTreeView.BranchContent>\n    </ArkTreeView.Branch>\n  )\n\n  return (\n    <ArkTreeView.Root\n      aria-label={localProps.data.label}\n      class={cx(styles.root, css(cssProps), localProps.class)}\n      {...rootProps}\n    >\n      <ArkTreeView.Tree class={styles.tree}>\n        <Index each={localProps.data.children}>{(child) => renderChild(child)}</Index>\n      </ArkTreeView.Tree>\n    </ArkTreeView.Root>\n  )\n}\n",
      "hasMultipleParts": false
    }
  ]
}
