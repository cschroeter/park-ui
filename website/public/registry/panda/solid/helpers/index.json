{
  "files": [
    {
      "filename": "create-style-context.ts",
      "content": "import {\n  createComponent,\n  createContext,\n  mergeProps,\n  useContext,\n  type ComponentProps,\n  type ValidComponent,\n} from 'solid-js'\nimport { Dynamic } from 'solid-js/web'\n\ntype GenericProps = Record<string, unknown>\ntype StyleRecipe = {\n  (props: GenericProps): Record<string, string>\n  splitVariantProps: (props: GenericProps) => any\n}\n\nexport const createStyleContext = <R extends StyleRecipe>(recipe: R) => {\n  const StyleContext = createContext<Record<string, string> | null>(null)\n\n  const withProvider = <T extends ValidComponent, P = ComponentProps<T>>(\n    Component: T,\n    slot?: string,\n  ) => {\n    const StyledComponent = (props: P & Parameters<R>[0]) => {\n      const [variantProps, componentProps] = recipe.splitVariantProps(props)\n      const styleProperties = recipe(variantProps)\n      return (\n        <StyleContext.Provider value={styleProperties}>\n          <Dynamic\n            component={Component}\n            class={styleProperties?.[slot ?? '']}\n            {...componentProps}\n          />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withContext = <T extends ValidComponent, P = ComponentProps<T>>(\n    Component: T,\n    slot?: string,\n  ): T => {\n    if (!slot) return Component\n    const StyledComponent = (props: P) => {\n      const styleProperties = useContext(StyleContext)\n      return createComponent(\n        Dynamic,\n        mergeProps(props, { component: Component, class: styleProperties?.[slot ?? ''] }),\n      )\n    }\n    return StyledComponent as T\n  }\n\n  return {\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
