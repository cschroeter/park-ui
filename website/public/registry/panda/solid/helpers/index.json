{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import { type JSX, createContext, useContext } from 'solid-js'\nimport { Dynamic } from 'solid-js/web'\nimport { cx } from 'styled-system/css'\nimport { styled } from 'styled-system/jsx'\nimport type { ElementType } from 'styled-system/types'\n\ntype Props = Record<string, unknown>\ntype Recipe = {\n  (props?: Props): Props\n  splitVariantProps: (props: Props) => [Props, Props]\n}\n\ntype Slot<R extends Recipe> = keyof ReturnType<R>\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<Record<Slot<R>, string> | null>(null)\n\n  const withRootProvider = <P extends {}>(Component: ElementType): ((props: P) => JSX.Element) => {\n    const StyledComponent = (props: P) => {\n      const [variantProps, localProps] = recipe.splitVariantProps(props)\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Component {...localProps} />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withProvider = <P extends { class?: string }>(\n    Component: ElementType,\n    slot: Slot<R>,\n  ): ((props: P) => JSX.Element) => {\n    const StyledComponent = styled(Component)\n\n    return (props: P) => {\n      const [variantProps, localProps] = recipe.splitVariantProps(props)\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Dynamic\n            component={StyledComponent}\n            {...localProps}\n            class={cx(slotStyles?.[slot], props.class)}\n          />\n        </StyleContext.Provider>\n      )\n    }\n  }\n\n  const withContext = <P extends { class?: string }>(\n    Component: ElementType,\n    slot: Slot<R>,\n  ): ((props: P) => JSX.Element) => {\n    const StyledComponent = styled(Component)\n\n    const Foo = (props: P) => {\n      const slotStyles = useContext(StyleContext)\n      return (\n        <Dynamic\n          component={StyledComponent}\n          {...props}\n          class={cx(slotStyles?.[slot], props.class)}\n        />\n      )\n    }\n    return Foo\n  }\n\n  return {\n    withRootProvider,\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
