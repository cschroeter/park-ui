{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "switch",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "react"],
  "files": [
    {
      "content": "'use client'\nimport { ark } from '@ark-ui/react'\nimport { Switch, useSwitchContext } from '@ark-ui/react/switch'\nimport { type ComponentProps, forwardRef, type ReactNode } from 'react'\nimport { createStyleContext, styled } from 'styled-system/jsx'\nimport { switchRecipe } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(switchRecipe)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(Switch.Root, 'root')\nexport const RootProvider = withProvider(Switch.RootProvider, 'root')\nexport const Label = withContext(Switch.Label, 'label')\nexport const Thumb = withContext(Switch.Thumb, 'thumb')\nexport const HiddenInput = Switch.HiddenInput\n\nexport const Control = withContext(Switch.Control, 'control', {\n  defaultProps: { children: <Thumb /> },\n})\n\nexport { SwitchContext as Context } from '@ark-ui/react/switch'\n\ninterface IndicatorProps extends ComponentProps<typeof StyledIndicator> {\n  fallback?: ReactNode | undefined\n}\n\nconst StyledIndicator = withContext(ark.span, 'indicator')\nexport const Indicator = forwardRef<HTMLSpanElement, IndicatorProps>(\n  function Indicator(props, ref) {\n    const { fallback, children, ...rest } = props\n    const api = useSwitchContext()\n    return (\n      <StyledIndicator ref={ref} data-checked={api.checked ? '' : undefined} {...rest}>\n        {api.checked ? children : fallback}\n      </StyledIndicator>\n    )\n  },\n)\n\ninterface ThumbIndicatorProps extends ComponentProps<typeof StyledThumbIndicator> {\n  fallback?: React.ReactNode | undefined\n}\n\nconst StyledThumbIndicator = styled(ark.span)\nexport const ThumbIndicator = forwardRef<HTMLSpanElement, ThumbIndicatorProps>(\n  function SwitchThumbIndicator(props, ref) {\n    const { fallback, children, ...rest } = props\n    const api = useSwitchContext()\n    return (\n      <StyledThumbIndicator ref={ref} data-checked={api.checked ? '' : undefined} {...rest}>\n        {api.checked ? children : fallback}\n      </StyledThumbIndicator>\n    )\n  },\n)\n",
      "type": "registry:ui",
      "path": "ui/switch.tsx"
    }
  ],
  "registryDependencies": ["switch-recipe"]
}
