{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "react"],
  "files": [
    {
      "content": "'use client'\nimport { ark } from '@ark-ui/react/factory'\nimport { createContext, mergeProps } from '@ark-ui/react/utils'\nimport { type ComponentProps, forwardRef, useMemo } from 'react'\nimport { styled } from 'styled-system/jsx'\nimport { type ButtonVariantProps, button } from 'styled-system/recipes'\nimport { Group, type GroupProps } from './group'\nimport { Loader } from './loader'\n\ninterface ButtonLoadingProps {\n  /**\n   * If `true`, the button will show a loading spinner.\n   * @default false\n   */\n  loading?: boolean | undefined\n  /**\n   * The text to show while loading.\n   */\n  loadingText?: React.ReactNode | undefined\n  /**\n   * The spinner to show while loading.\n   */\n  spinner?: React.ReactNode | undefined\n  /**\n   * The placement of the spinner\n   * @default \"start\"\n   */\n  spinnerPlacement?: 'start' | 'end' | undefined\n}\n\ntype BaseButtonProps = ComponentProps<typeof BaseButton>\nconst BaseButton = styled(ark.button, button)\n\nexport interface ButtonProps extends BaseButtonProps, ButtonLoadingProps {}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(function Button(props, ref) {\n  const propsContext = useButtonPropsContext()\n  const buttonProps = useMemo(\n    () => mergeProps<ButtonProps>(propsContext, props),\n    [propsContext, props],\n  )\n\n  const { loading, loadingText, children, spinner, spinnerPlacement, ...rest } = buttonProps\n  return (\n    <BaseButton\n      type=\"button\"\n      ref={ref}\n      {...rest}\n      data-loading={loading ? '' : undefined}\n      disabled={loading || rest.disabled}\n    >\n      {!props.asChild && loading ? (\n        <Loader spinner={spinner} text={loadingText} spinnerPlacement={spinnerPlacement}>\n          {children}\n        </Loader>\n      ) : (\n        children\n      )}\n    </BaseButton>\n  )\n})\n\nexport interface ButtonGroupProps extends GroupProps, ButtonVariantProps {}\n\nexport const ButtonGroup = forwardRef<HTMLDivElement, ButtonGroupProps>(\n  function ButtonGroup(props, ref) {\n    const [variantProps, otherProps] = useMemo(() => button.splitVariantProps(props), [props])\n    return (\n      <ButtonPropsProvider value={variantProps}>\n        <Group ref={ref} {...otherProps} />\n      </ButtonPropsProvider>\n    )\n  },\n)\n\nconst [ButtonPropsProvider, useButtonPropsContext] = createContext<ButtonVariantProps>({\n  name: 'ButtonPropsContext',\n  hookName: 'useButtonPropsContext',\n  providerName: '<PropsProvider />',\n  strict: false,\n})\n",
      "type": "registry:ui",
      "path": "button.tsx"
    }
  ],
  "registryDependencies": ["button-recipe", "group", "loader"]
}
