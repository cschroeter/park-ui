{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "rating-group",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "lucide-react", "react"],
  "files": [
    {
      "content": "'use client'\nimport {\n  RatingGroup,\n  useRatingGroupContext,\n  useRatingGroupItemContext,\n} from '@ark-ui/react/rating-group'\nimport { StarIcon } from 'lucide-react'\nimport {\n  type ComponentProps,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  type ReactElement,\n} from 'react'\nimport { createStyleContext, type HTMLStyledProps } from 'styled-system/jsx'\nimport { ratingGroup } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(ratingGroup)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(RatingGroup.Root, 'root')\nexport const RootProvider = withProvider(RatingGroup.RootProvider, 'root')\nexport const Item = withContext(RatingGroup.Item, 'item')\nexport const Label = withContext(RatingGroup.Label, 'label')\n\nexport const HiddenInput = RatingGroup.HiddenInput\n\nexport {\n  RatingGroupContext as Context,\n  RatingGroupItemContext as ItemContext,\n} from '@ark-ui/react/rating-group'\n\ninterface ItemIndicatorProps extends HTMLStyledProps<'span'> {\n  icon?: ReactElement | undefined\n}\n\nconst StyledItemIndicator = withContext('span', 'itemIndicator')\n\nconst cloneIcon = (icon: ReactElement, type: string) => {\n  if (!isValidElement(icon)) return null\n  const props = { [`data-${type}`]: '', 'aria-hidden': true, fill: 'currentColor' }\n  return cloneElement(icon, props)\n}\n\nexport const ItemIndicator = forwardRef<HTMLSpanElement, ItemIndicatorProps>(\n  function ItemIndicator(props, ref) {\n    const { icon = <StarIcon />, ...rest } = props\n    const item = useRatingGroupItemContext()\n\n    return (\n      <StyledItemIndicator\n        ref={ref}\n        {...rest}\n        data-highlighted={item.highlighted ? '' : undefined}\n        data-checked={item.checked ? '' : undefined}\n        data-half={item.half ? '' : undefined}\n      >\n        {cloneIcon(icon, 'bg')}\n        {cloneIcon(icon, 'fg')}\n      </StyledItemIndicator>\n    )\n  },\n)\n\ninterface ItemsProps extends Omit<ComponentProps<typeof Item>, 'index'> {\n  icon?: ReactElement | undefined\n}\n\nexport const Items = (props: ItemsProps) => {\n  const { icon, ...rest } = props\n  const ratingGroup = useRatingGroupContext()\n  return ratingGroup.items.map((item) => (\n    <Item key={item} index={item} {...rest}>\n      <ItemIndicator icon={icon} />\n    </Item>\n  ))\n}\n\nexport const Control = withContext(RatingGroup.Control, 'control', {\n  defaultProps: { children: <Items /> },\n})\n",
      "type": "registry:ui",
      "path": "rating-group.tsx",
      "exports": "export * as RatingGroup from './rating-group'"
    }
  ],
  "registryDependencies": ["rating-group-recipe"]
}
