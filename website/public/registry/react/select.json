{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "lucide-react", "react"],
  "files": [
    {
      "content": "'use client'\nimport type { Assign, SelectRootProps } from '@ark-ui/react'\nimport { ark } from '@ark-ui/react/factory'\nimport { Select, useSelectItemContext } from '@ark-ui/react/select'\nimport { CheckIcon, ChevronsUpDownIcon } from 'lucide-react'\nimport { forwardRef, type RefAttributes } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { type SelectVariantProps, select } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\n\nconst { withProvider, withContext } = createStyleContext(select)\n\ntype StyleProps = SelectVariantProps & HTMLStyledProps<'div'>\n\nexport type RootProps<T> = Assign<SelectRootProps<T>, StyleProps> & RefAttributes<HTMLDivElement>\n\nexport const Root = withProvider(Select.Root, 'root') as Select.RootComponent<StyleProps>\n\nexport const ClearTrigger = withContext(Select.ClearTrigger, 'clearTrigger')\nexport const Content = withContext(Select.Content, 'content')\nexport const Control = withContext(Select.Control, 'control')\nexport const IndicatorGroup = withContext(ark.div, 'indicatorGroup')\nexport const Item = withContext(Select.Item, 'item')\nexport const ItemGroup = withContext(Select.ItemGroup, 'itemGroup')\nexport const ItemGroupLabel = withContext(Select.ItemGroupLabel, 'itemGroupLabel')\nexport const ItemText = withContext(Select.ItemText, 'itemText')\nexport const Label = withContext(Select.Label, 'label')\nexport const List = withContext(Select.List, 'list')\nexport const Positioner = withContext(Select.Positioner, 'positioner')\nexport const Trigger = withContext(Select.Trigger, 'trigger')\nexport const ValueText = withContext(Select.ValueText, 'valueText')\nexport const Indicator = withContext(Select.Indicator, 'indicator', {\n  defaultProps: { children: <ChevronsUpDownIcon /> },\n})\nexport const HiddenSelect = Select.HiddenSelect\n\nexport {\n  SelectContext as Context,\n  SelectItemContext as ItemContext,\n  type SelectValueChangeDetails as ValueChangeDetails,\n} from '@ark-ui/react/select'\n\nconst StyledItemIndicator = withContext(Select.ItemIndicator, 'itemIndicator')\n\nexport const ItemIndicator = forwardRef<HTMLDivElement, HTMLStyledProps<'div'>>(\n  function ItemIndicator(props, ref) {\n    const item = useSelectItemContext()\n\n    return item.selected ? (\n      <StyledItemIndicator ref={ref} {...props}>\n        <CheckIcon />\n      </StyledItemIndicator>\n    ) : (\n      <svg aria-hidden=\"true\" focusable=\"false\" />\n    )\n  },\n)\n",
      "type": "registry:ui",
      "path": "select.tsx",
      "exports": "export * as Select from './select'"
    }
  ],
  "registryDependencies": ["select-recipe"]
}
