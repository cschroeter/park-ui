{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "react"],
  "files": [
    {
      "content": "'use client'\nimport { ark } from '@ark-ui/react/factory'\nimport { Slider, useSliderContext } from '@ark-ui/react/slider'\nimport { type ComponentProps, forwardRef } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { slider } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(slider)\n\nexport const Root = withProvider(Slider.Root, 'root')\nexport const Control = withContext(Slider.Control, 'control')\nexport const DraggingIndicator = withContext(Slider.DraggingIndicator, 'draggingIndicator')\nexport const Label = withContext(Slider.Label, 'label')\nexport const Marker = withContext(Slider.Marker, 'marker')\nexport const MarkerIndicator = withContext(ark.div, 'markerIndicator')\nexport const MarkerGroup = withContext(Slider.MarkerGroup, 'markerGroup')\nexport const Range = withContext(Slider.Range, 'range')\nexport const Thumb = withContext(Slider.Thumb, 'thumb')\nexport const Track = withContext(Slider.Track, 'track')\nexport const ValueText = withContext(Slider.ValueText, 'valueText')\nexport const HiddenInput = Slider.HiddenInput\n\nexport { SliderContext as Context } from '@ark-ui/react/slider'\n\nexport type RootProps = ComponentProps<typeof Root>\nexport type MarkerGroupProps = ComponentProps<typeof MarkerGroup>\nexport type ThumbProps = ComponentProps<typeof Thumb>\n\nexport interface MarksProps extends MarkerGroupProps {\n  marks?: Array<number | { value: number; label: React.ReactNode }> | undefined\n}\n\nexport const Marks = forwardRef<HTMLDivElement, MarksProps>(function Marks(props, ref) {\n  const { marks, ...rest } = props\n  if (!marks?.length) return null\n\n  return (\n    <MarkerGroup ref={ref} {...rest}>\n      {marks.map((mark, index) => {\n        const value = typeof mark === 'number' ? mark : mark.value\n        const label = typeof mark === 'number' ? undefined : mark.label\n        return (\n          <Marker key={index} value={value}>\n            <MarkerIndicator />\n            {label != null && <span>{label}</span>}\n          </Marker>\n        )\n      })}\n    </MarkerGroup>\n  )\n})\n\nexport const Thumbs = (props: Omit<ThumbProps, 'index'>) => {\n  const slider = useSliderContext()\n  return slider.value.map((_, index) => (\n    <Thumb key={index} index={index} {...props}>\n      <HiddenInput />\n    </Thumb>\n  ))\n}\n",
      "type": "registry:ui",
      "path": "ui/slider.tsx"
    }
  ],
  "registryDependencies": ["slider-recipe"]
}
