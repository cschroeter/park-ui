{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "segment-group",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "react"],
  "files": [
    {
      "content": "'use client'\nimport { SegmentGroup } from '@ark-ui/react/segment-group'\nimport { type ComponentProps, type ReactNode, useMemo } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { segmentGroup } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(segmentGroup)\n\nexport type RootProps = ComponentProps<typeof Root>\n\nexport const Root = withProvider(SegmentGroup.Root, 'root', {\n  defaultProps: { orientation: 'horizontal' },\n  forwardProps: ['orientation'],\n})\nexport const RootProvider = withProvider(SegmentGroup.RootProvider, 'root')\nexport const Indicator = withContext(SegmentGroup.Indicator, 'indicator')\nexport const Item = withContext(SegmentGroup.Item, 'item')\nexport const ItemControl = withContext(SegmentGroup.ItemControl, 'itemControl')\nexport const ItemHiddenInput = SegmentGroup.ItemHiddenInput\nexport const ItemText = withContext(SegmentGroup.ItemText, 'itemText')\nexport const Label = withContext(SegmentGroup.Label, 'label')\n\nexport { SegmentGroupContext as Context } from '@ark-ui/react/segment-group'\n\ninterface Item {\n  value: string\n  label: ReactNode\n  disabled?: boolean | undefined\n}\n\ntype ItemProps = ComponentProps<typeof Item>\n\nexport interface ItemsProps extends Omit<ItemProps, 'value'> {\n  items: Array<string | Item>\n}\n\nexport const Items = (props: ItemsProps) => {\n  const { items, ...itemProps } = props\n  const data = useMemo(() => normalize(items), [items])\n\n  return data.map((item) => (\n    <Item key={item.value} value={item.value} disabled={item.disabled} {...itemProps}>\n      <ItemText>{item.label}</ItemText>\n      <ItemHiddenInput />\n    </Item>\n  ))\n}\n\nconst normalize = (items: Array<string | Item>): Item[] =>\n  items.map((item) => (typeof item === 'string' ? { value: item, label: item } : item))\n",
      "type": "registry:ui",
      "path": "segment-group.tsx",
      "exports": "export * as SegmentGroup from './segment-group'"
    }
  ],
  "registryDependencies": ["segment-group-recipe"]
}
