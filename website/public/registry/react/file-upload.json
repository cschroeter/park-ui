{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "name": "file-upload",
  "type": "registry:ui",
  "dependencies": ["@ark-ui/react", "lucide-react", "react", "@/components"],
  "files": [
    {
      "content": "'use client'\nimport { FileUpload, useFileUploadContext } from '@ark-ui/react/file-upload'\nimport { FileIcon, XIcon } from 'lucide-react'\nimport { type ComponentProps, forwardRef, useMemo } from 'react'\nimport { createStyleContext, type HTMLStyledProps, Stack } from 'styled-system/jsx'\nimport { fileUpload } from 'styled-system/recipes'\nimport { Span } from '@/components/ui'\n\nconst { withProvider, withContext } = createStyleContext(fileUpload)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport type ItemProps = ComponentProps<typeof Item>\n\nexport const Root = withProvider(FileUpload.Root, 'root')\nexport const RootProvider = withProvider(FileUpload.RootProvider, 'root')\nexport const ClearTrigger = withContext(FileUpload.ClearTrigger, 'clearTrigger')\nexport const Dropzone = withContext(FileUpload.Dropzone, 'dropzone')\nexport const HiddenInput = FileUpload.HiddenInput\nexport const Item = withContext(FileUpload.Item, 'item')\nexport const ItemDeleteTrigger = withContext(FileUpload.ItemDeleteTrigger, 'itemDeleteTrigger', {\n  defaultProps: { children: <XIcon /> },\n})\nexport const ItemGroup = withContext(FileUpload.ItemGroup, 'itemGroup')\nexport const ItemName = withContext(FileUpload.ItemName, 'itemName')\nexport const ItemPreview = withContext(FileUpload.ItemPreview, 'itemPreview', {\n  defaultProps: {\n    children: <FileIcon />,\n  },\n})\nexport const ItemPreviewImage = withContext(FileUpload.ItemPreviewImage, 'itemPreviewImage')\nexport const ItemSizeText = withContext(FileUpload.ItemSizeText, 'itemSizeText')\nexport const Label = withContext(FileUpload.Label, 'label')\nexport const Trigger = withContext(FileUpload.Trigger, 'trigger')\n\nexport { FileUploadContext as Context } from '@ark-ui/react/file-upload'\n\ninterface ItemsBaseProps {\n  showSize?: boolean | undefined\n  clearable?: boolean | undefined\n  files?: File[] | undefined\n}\n\ninterface ItemsProps extends Omit<ItemProps, 'file'>, ItemsBaseProps {}\n\nexport const Items = (props: ItemsProps) => {\n  const { showSize, clearable, files, ...rest } = props\n  const fileUpload = useFileUploadContext()\n  const acceptedFiles = files ?? fileUpload.acceptedFiles\n\n  return acceptedFiles.map((file) => (\n    <Item file={file} key={file.name} {...rest}>\n      <ItemPreview />\n      <Stack gap=\"0.5\" flex=\"1\">\n        <ItemName />\n        {showSize && <ItemSizeText />}\n      </Stack>\n\n      {clearable && <ItemDeleteTrigger />}\n    </Item>\n  ))\n}\n\ninterface FileUploadListProps extends ItemsBaseProps {}\n\nexport const List = forwardRef<HTMLUListElement, FileUploadListProps>(\n  function FileUploadList(props, ref) {\n    const { showSize, clearable, files, ...rest } = props\n\n    return (\n      <ItemGroup ref={ref} {...rest}>\n        <Items showSize={showSize} clearable={clearable} files={files} />\n      </ItemGroup>\n    )\n  },\n)\n\nexport interface FileTextProps extends HTMLStyledProps<'span'> {\n  fallback?: string | undefined\n}\n\nexport const FileText = forwardRef<HTMLSpanElement, FileTextProps>(\n  function FileUploadFileText(props, ref) {\n    const { fallback = 'Select file(s)', ...rest } = props\n\n    const fileUpload = useFileUploadContext()\n\n    const acceptedFiles = fileUpload.acceptedFiles\n\n    const fileText = useMemo(() => {\n      if (acceptedFiles.length === 1) {\n        return acceptedFiles[0].name\n      }\n      if (acceptedFiles.length > 1) {\n        return `${acceptedFiles.length} files`\n      }\n      return fallback\n    }, [acceptedFiles, fallback])\n\n    return (\n      <Span\n        ref={ref}\n        data-placeholder={fileText === fallback ? '' : undefined}\n        data-scope=\"file-upload\"\n        data-part=\"file-text\"\n        {...rest}\n      >\n        {fileText}\n      </Span>\n    )\n  },\n)\n",
      "type": "registry:ui",
      "path": "file-upload.tsx",
      "exports": "export * as FileUpload from './file-upload'"
    }
  ],
  "registryDependencies": ["file-upload-recipe"]
}
