{
  "id": "segment-group",
  "name": "Segment Group",
  "variants": [
    {
      "file": "primitives/segment-group.tsx",
      "content": "import { SegmentGroup, type Assign } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { type SegmentGroupVariantProps, segmentGroup } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(segmentGroup)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, SegmentGroup.RootProviderProps>, SegmentGroupVariantProps>\n>(SegmentGroup.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, SegmentGroup.RootProps>, SegmentGroupVariantProps>\n>(SegmentGroup.Root, 'root')\n\nexport const Indicator = withContext<Assign<HTMLStyledProps<'div'>, SegmentGroup.IndicatorProps>>(\n  SegmentGroup.Indicator,\n  'indicator',\n)\n\nexport const ItemControl = withContext<\n  Assign<HTMLStyledProps<'div'>, SegmentGroup.ItemControlProps>\n>(SegmentGroup.ItemControl, 'itemControl')\n\nexport const Item = withContext<Assign<HTMLStyledProps<'label'>, SegmentGroup.ItemProps>>(\n  SegmentGroup.Item,\n  'item',\n)\n\nexport const ItemText = withContext<Assign<HTMLStyledProps<'span'>, SegmentGroup.ItemTextProps>>(\n  SegmentGroup.ItemText,\n  'itemText',\n)\n\nexport const Label = withContext<Assign<HTMLStyledProps<'label'>, SegmentGroup.LabelProps>>(\n  SegmentGroup.Label,\n  'label',\n)\n\nexport {\n  SegmentGroupContext as Context,\n  SegmentGroupItemHiddenInput as ItemHiddenInput,\n} from '@ark-ui/solid'\n",
      "exports": "export * as SegmentGroup from './segment-group'"
    }
  ]
}
