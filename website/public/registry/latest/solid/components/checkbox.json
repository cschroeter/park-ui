{
  "id": "checkbox",
  "name": "Checkbox",
  "variants": [
    {
      "file": "primitives/checkbox.tsx",
      "content": "import { type Assign, Checkbox } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { type CheckboxVariantProps, checkbox } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(checkbox)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<Assign<HTMLStyledProps<'label'>, Checkbox.RootProviderBaseProps>, CheckboxVariantProps>\n>(Checkbox.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'label'>, Checkbox.RootBaseProps>, CheckboxVariantProps>\n>(Checkbox.Root, 'root')\n\nexport const Control = withContext<Assign<HTMLStyledProps<'div'>, Checkbox.ControlBaseProps>>(\n  Checkbox.Control,\n  'control',\n)\n\nexport const Group = withContext<Assign<HTMLStyledProps<'div'>, Checkbox.GroupBaseProps>>(\n  Checkbox.Group,\n  'group',\n)\n\nexport const Indicator = withContext<Assign<HTMLStyledProps<'div'>, Checkbox.IndicatorBaseProps>>(\n  Checkbox.Indicator,\n  'indicator',\n)\n\nexport const Label = withContext<Assign<HTMLStyledProps<'span'>, Checkbox.LabelBaseProps>>(\n  Checkbox.Label,\n  'label',\n)\n\nexport {\n  CheckboxContext as Context,\n  CheckboxHiddenInput as HiddenInput,\n} from '@ark-ui/solid'\n"
    },
    {
      "file": "checkbox.tsx",
      "content": "import { Show, children } from 'solid-js'\nimport * as ArkCheckbox from './primitives/checkbox'\n\nexport interface CheckboxProps extends ArkCheckbox.RootProps {}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const getChildren = children(() => props.children)\n\n  return (\n    <ArkCheckbox.Root {...props}>\n      <ArkCheckbox.Control>\n        <ArkCheckbox.Indicator>\n          <CheckIcon />\n        </ArkCheckbox.Indicator>\n        <ArkCheckbox.Indicator indeterminate>\n          <MinusIcon />\n        </ArkCheckbox.Indicator>\n      </ArkCheckbox.Control>\n      <Show when={getChildren()}>\n        <ArkCheckbox.Label>{getChildren()}</ArkCheckbox.Label>\n      </Show>\n      <ArkCheckbox.HiddenInput />\n    </ArkCheckbox.Root>\n  )\n}\n\nconst CheckIcon = () => (\n  <svg viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <title>Check Icon</title>\n    <path\n      d=\"M11.6666 3.5L5.24992 9.91667L2.33325 7\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n)\n\nconst MinusIcon = () => (\n  <svg viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <title>Minus Icon</title>\n    <path\n      d=\"M2.91675 7H11.0834\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n)\n"
    }
  ]
}
