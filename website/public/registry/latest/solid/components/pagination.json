{
  "id": "pagination",
  "name": "Pagination",
  "filename": "pagination.tsx",
  "variants": [
    {
      "file": "primitives/pagination.tsx",
      "content": "import { Pagination, type Assign } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { type PaginationVariantProps, pagination } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(pagination)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<Assign<HTMLStyledProps<'nav'>, Pagination.RootProviderProps>, PaginationVariantProps>\n>(Pagination.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'nav'>, Pagination.RootProps>, PaginationVariantProps>\n>(Pagination.Root, 'root')\n\nexport const Ellipsis = withContext<Assign<HTMLStyledProps<'div'>, Pagination.EllipsisProps>>(\n  Pagination.Ellipsis,\n  'ellipsis',\n)\n\nexport const Item = withContext<Assign<HTMLStyledProps<'button'>, Pagination.ItemProps>>(\n  Pagination.Item,\n  'item',\n)\n\nexport const NextTrigger = withContext<\n  Assign<HTMLStyledProps<'button'>, Pagination.NextTriggerProps>\n>(Pagination.NextTrigger, 'nextTrigger')\n\nexport const PrevTrigger = withContext<\n  Assign<HTMLStyledProps<'button'>, Pagination.PrevTriggerProps>\n>(Pagination.PrevTrigger, 'prevTrigger')\n\nexport { PaginationContext as Context } from '@ark-ui/solid'\n",
      "exports": "export * as Pagination from './pagination'"
    },
    {
      "file": "pagination.tsx",
      "content": "import { For } from 'solid-js'\nimport { Pagination as ArkPagination, Button, IconButton } from '~/components/ui/primitives'\n\nexport interface PaginationProps extends ArkPagination.RootProps {}\n\nexport const Pagination = (props: PaginationProps) => {\n  return (\n    <ArkPagination.Root {...props}>\n      <ArkPagination.PrevTrigger\n        asChild={(props) => (\n          <IconButton {...props} variant=\"ghost\" aria-label=\"Next Page\">\n            <ChevronLeftIcon />\n          </IconButton>\n        )}\n      />\n      <ArkPagination.Context>\n        {(pagiation) => (\n          <For each={pagiation().pages}>\n            {(page, index) =>\n              page.type === 'page' ? (\n                <ArkPagination.Item\n                  {...page}\n                  asChild={(props) => <Button {...props} variant=\"outline\" />}\n                >\n                  {page.value}\n                </ArkPagination.Item>\n              ) : (\n                <ArkPagination.Ellipsis index={index()}>&#8230;</ArkPagination.Ellipsis>\n              )\n            }\n          </For>\n        )}\n      </ArkPagination.Context>\n      <ArkPagination.NextTrigger\n        asChild={(props) => (\n          <IconButton {...props} variant=\"ghost\" aria-label=\"Next Page\">\n            <ChevronRightIcon />\n          </IconButton>\n        )}\n      />\n    </ArkPagination.Root>\n  )\n}\n\nconst ChevronLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Left Icon</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m15 18l-6-6l6-6\"\n    />\n  </svg>\n)\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right Icon</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n",
      "exports": "export { Pagination, type PaginationProps } from './pagination'"
    }
  ]
}
