{
  "id": "tree-view",
  "name": "Tree View",
  "variants": [
    {
      "file": "styled/tree-view.tsx",
      "content": "import { type Assign, TreeView } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { type TreeViewVariantProps, treeView } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from './utils/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(treeView)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootProviderBaseProps>, TreeViewVariantProps>\n>(TreeView.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootBaseProps>, TreeViewVariantProps>\n>(TreeView.Root, 'root')\n\nexport const BranchContent = withContext<\n  Assign<HTMLStyledProps<'ul'>, TreeView.BranchContentBaseProps>\n>(TreeView.BranchContent, 'branchContent')\n\nexport const BranchControl = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchControlBaseProps>\n>(TreeView.BranchControl, 'branchControl')\n\nexport const BranchIndicator = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndicatorBaseProps>\n>(TreeView.BranchIndicator, 'branchIndicator')\n\nexport const Branch = withContext<Assign<HTMLStyledProps<'li'>, TreeView.BranchBaseProps>>(\n  TreeView.Branch,\n  'branch',\n)\n\nexport const BranchText = withContext<\n  Assign<HTMLStyledProps<'span'>, TreeView.BranchTextBaseProps>\n>(TreeView.BranchText, 'branchText')\n\nexport const BranchTrigger = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchTriggerBaseProps>\n>(TreeView.BranchTrigger, 'branchTrigger')\n\nexport const ItemIndicator = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.ItemIndicatorBaseProps>\n>(TreeView.ItemIndicator, 'itemIndicator')\n\nexport const Item = withContext<Assign<HTMLStyledProps<'li'>, TreeView.ItemBaseProps>>(\n  TreeView.Item,\n  'item',\n)\n\nexport const ItemText = withContext<Assign<HTMLStyledProps<'span'>, TreeView.ItemTextBaseProps>>(\n  TreeView.ItemText,\n  'itemText',\n)\n\nexport const Label = withContext<Assign<HTMLStyledProps<'label'>, TreeView.LabelBaseProps>>(\n  TreeView.Label,\n  'label',\n)\n\nexport const Tree = withContext<Assign<HTMLStyledProps<'ul'>, TreeView.TreeBaseProps>>(\n  TreeView.Tree,\n  'tree',\n)\n\nexport { TreeViewContext as Context } from '@ark-ui/solid'\n"
    },
    {
      "file": "tree-view.tsx",
      "content": "import { For, Show, splitProps } from 'solid-js'\nimport * as StyledTreeView from './styled/tree-view'\n\ninterface Child {\n  value: string\n  name: string\n  children?: Child[]\n}\n\nexport interface TreeViewData {\n  label: string\n  children: Child[]\n}\n\nexport interface TreeViewProps extends StyledTreeView.RootProps {\n  data: TreeViewData\n}\nexport const TreeView = (props: TreeViewProps) => {\n  const [localProps, rootProps] = splitProps(props, ['data'])\n\n  const renderChild = (child: Child) => (\n    <Show\n      when={child.children}\n      fallback={\n        <StyledTreeView.Item value={child.value}>\n          <StyledTreeView.ItemText>{child.name}</StyledTreeView.ItemText>\n        </StyledTreeView.Item>\n      }\n    >\n      <StyledTreeView.Branch value={child.value}>\n        <StyledTreeView.BranchControl>\n          <StyledTreeView.BranchIndicator>\n            <ChevronRightIcon />\n          </StyledTreeView.BranchIndicator>\n          <StyledTreeView.BranchText>{child.name}</StyledTreeView.BranchText>\n        </StyledTreeView.BranchControl>\n        <StyledTreeView.BranchContent>\n          <For each={child.children}>{(child) => renderChild(child)}</For>\n        </StyledTreeView.BranchContent>\n      </StyledTreeView.Branch>\n    </Show>\n  )\n\n  return (\n    <StyledTreeView.Root aria-label={localProps.data.label} {...rootProps}>\n      <StyledTreeView.Tree>\n        <For each={localProps.data.children}>{(child) => renderChild(child)}</For>\n      </StyledTreeView.Tree>\n    </StyledTreeView.Root>\n  )\n}\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right Icon</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n"
    }
  ]
}
