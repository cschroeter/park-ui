{
  "id": "rating-group",
  "name": "Rating Group",
  "variants": [
    {
      "file": "primitives/rating-group.tsx",
      "content": "import { type Assign, RatingGroup } from '@ark-ui/solid'\nimport type { ComponentProps } from 'solid-js'\nimport { type RatingGroupVariantProps, ratingGroup } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(ratingGroup)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, RatingGroup.RootProviderProps>, RatingGroupVariantProps>\n>(RatingGroup.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, RatingGroup.RootProps>, RatingGroupVariantProps>\n>(RatingGroup.Root, 'root')\n\nexport const Control = withContext<Assign<HTMLStyledProps<'div'>, RatingGroup.ControlProps>>(\n  RatingGroup.Control,\n  'control',\n)\n\nexport const Item = withContext<Assign<HTMLStyledProps<'span'>, RatingGroup.ItemProps>>(\n  RatingGroup.Item,\n  'item',\n)\n\nexport const Label = withContext<Assign<HTMLStyledProps<'label'>, RatingGroup.LabelProps>>(\n  RatingGroup.Label,\n  'label',\n)\n\nexport {\n  RatingGroupContext as Context,\n  RatingGroupHiddenInput as HiddenInput,\n  RatingGroupItemContext as ItemContext,\n} from '@ark-ui/solid'\n",
      "exports": "export * as RatingGroup from './rating-group'"
    },
    {
      "file": "rating-group.tsx",
      "content": "import { Index, Show, children } from 'solid-js'\nimport { RatingGroup as ArkRatingGroup } from '~/components/ui/primitives'\n\nexport interface RatingGroupProps extends ArkRatingGroup.RootProps {}\n\nexport const RatingGroup = (props: RatingGroupProps) => {\n  const getChildren = children(() => props.children)\n\n  return (\n    <ArkRatingGroup.Root {...props}>\n      <Show when={getChildren()}>\n        <ArkRatingGroup.Label>{getChildren()}</ArkRatingGroup.Label>\n      </Show>\n      <ArkRatingGroup.Control>\n        <ArkRatingGroup.Context>\n          {(context) => (\n            <Index each={context().items}>\n              {(index) => (\n                <ArkRatingGroup.Item index={index()}>\n                  <ArkRatingGroup.ItemContext>\n                    {(item) => (\n                      <Show when={item().highlighted} fallback={<StarIcon />}>\n                        <StarIcon half={item().half} />\n                      </Show>\n                    )}\n                  </ArkRatingGroup.ItemContext>\n                </ArkRatingGroup.Item>\n              )}\n            </Index>\n          )}\n        </ArkRatingGroup.Context>\n      </ArkRatingGroup.Control>\n      <ArkRatingGroup.HiddenInput />\n    </ArkRatingGroup.Root>\n  )\n}\n\ninterface Props {\n  half?: boolean\n}\n\nconst StarIcon = (props: Props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"inherit\"\n    stroke=\"inherit\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  >\n    <title>Star Icon</title>\n    <defs>\n      <linearGradient id=\"half\">\n        <stop offset=\"50%\" stop-color=\"var(--colors-color-palette-default)\" />\n        <stop offset=\"50%\" stop-color=\"var(--colors-bg-emphasized)\" />\n      </linearGradient>\n    </defs>\n    <polygon\n      fill={props.half ? 'url(#half)' : 'inherit'}\n      points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"\n    />\n  </svg>\n)\n",
      "exports": "export { RatingGroup, type RatingGroupProps } from './rating-group'"
    }
  ]
}
