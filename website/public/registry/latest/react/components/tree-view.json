[
  {
    "filename": "./tree-view.tsx",
    "content": "import { forwardRef } from 'react'\nimport { TreeView as ArkTreeView } from '~/components/ui/styled'\n\ninterface Child {\n  value: string\n  name: string\n  children?: Child[]\n}\n\nexport interface TreeViewData {\n  label: string\n  children: Child[]\n}\n\nexport interface TreeViewProps extends ArkTreeView.RootProps {\n  data: TreeViewData\n}\n\nexport const TreeView = forwardRef<HTMLDivElement, TreeViewProps>((props, ref) => {\n  const { data, ...rootProps } = props\n\n  const renderChild = (child: Child) => (\n    <ArkTreeView.Branch key={child.value} value={child.value}>\n      <ArkTreeView.BranchControl>\n        <ArkTreeView.BranchIndicator>\n          <ChevronRightIcon />\n        </ArkTreeView.BranchIndicator>\n        <ArkTreeView.BranchText>{child.name}</ArkTreeView.BranchText>\n      </ArkTreeView.BranchControl>\n      <ArkTreeView.BranchContent>\n        {child.children?.map((child) =>\n          child.children ? (\n            renderChild(child)\n          ) : (\n            <ArkTreeView.Item key={child.value} value={child.value}>\n              <ArkTreeView.ItemText>{child.name}</ArkTreeView.ItemText>\n            </ArkTreeView.Item>\n          ),\n        )}\n      </ArkTreeView.BranchContent>\n    </ArkTreeView.Branch>\n  )\n\n  return (\n    <ArkTreeView.Root ref={ref} aria-label={data.label} {...rootProps}>\n      <ArkTreeView.Tree>{data.children.map(renderChild)}</ArkTreeView.Tree>\n    </ArkTreeView.Root>\n  )\n})\n\nTreeView.displayName = 'TreeView'\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right Icon</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n"
  },
  {
    "filename": "./primitives/tree-view.tsx",
    "content": "import type { Assign } from '@ark-ui/react'\nimport { TreeView } from '@ark-ui/react/tree-view'\nimport { type TreeViewVariantProps, treeView } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(treeView)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootProviderBaseProps>, TreeViewVariantProps>\n>(TreeView.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootBaseProps>, TreeViewVariantProps>\n>(TreeView.Root, 'root')\n\nexport const BranchContent = withContext<\n  HTMLUListElement,\n  Assign<HTMLStyledProps<'ul'>, TreeView.BranchContentBaseProps>\n>(TreeView.BranchContent, 'branchContent')\n\nexport const BranchControl = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchControlBaseProps>\n>(TreeView.BranchControl, 'branchControl')\n\nexport const BranchIndicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndicatorBaseProps>\n>(TreeView.BranchIndicator, 'branchIndicator')\n\nexport const Branch = withContext<\n  HTMLLIElement,\n  Assign<HTMLStyledProps<'li'>, TreeView.BranchBaseProps>\n>(TreeView.Branch, 'branch')\n\nexport const BranchText = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, TreeView.BranchTextBaseProps>\n>(TreeView.BranchText, 'branchText')\n\nexport const BranchTrigger = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchTriggerBaseProps>\n>(TreeView.BranchTrigger, 'branchTrigger')\n\nexport const ItemIndicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.ItemIndicatorBaseProps>\n>(TreeView.ItemIndicator, 'itemIndicator')\n\nexport const Item = withContext<\n  HTMLLIElement,\n  Assign<HTMLStyledProps<'li'>, TreeView.ItemBaseProps>\n>(TreeView.Item, 'item')\n\nexport const ItemText = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, TreeView.ItemTextBaseProps>\n>(TreeView.ItemText, 'itemText')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, TreeView.LabelBaseProps>\n>(TreeView.Label, 'label')\n\nexport const Tree = withContext<\n  HTMLUListElement,\n  Assign<HTMLStyledProps<'ul'>, TreeView.TreeBaseProps>\n>(TreeView.Tree, 'tree')\n\nexport {\n  TreeViewContext as Context,\n  type TreeViewContextProps as ContextProps,\n} from '@ark-ui/react/tree-view'\n"
  }
]
