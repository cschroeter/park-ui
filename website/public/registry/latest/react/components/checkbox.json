{
  "id": "checkbox",
  "name": "Checkbox",
  "variants": [
    {
      "file": "primitives/checkbox.tsx",
      "content": "'use client'\nimport type { Assign } from '@ark-ui/react'\nimport { Checkbox } from '@ark-ui/react/checkbox'\nimport { type CheckboxVariantProps, checkbox } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(checkbox)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLLabelElement,\n  Assign<Assign<HTMLStyledProps<'label'>, Checkbox.RootProviderBaseProps>, CheckboxVariantProps>\n>(Checkbox.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLLabelElement,\n  Assign<Assign<HTMLStyledProps<'label'>, Checkbox.RootBaseProps>, CheckboxVariantProps>\n>(Checkbox.Root, 'root')\n\nexport const Control = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Checkbox.ControlBaseProps>\n>(Checkbox.Control, 'control')\n\nexport const Group = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Checkbox.GroupBaseProps>\n>(Checkbox.Group, 'group')\n\nexport const Indicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Checkbox.IndicatorBaseProps>\n>(Checkbox.Indicator, 'indicator')\n\nexport const Label = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, Checkbox.LabelBaseProps>\n>(Checkbox.Label, 'label')\n\nexport {\n  CheckboxContext as Context,\n  CheckboxHiddenInput as HiddenInput,\n} from '@ark-ui/react/checkbox'\n",
      "exports": "export * as Checkbox from './checkbox'"
    },
    {
      "file": "checkbox.tsx",
      "content": "import { forwardRef } from 'react'\nimport { Checkbox as ArkCheckbox } from '~/components/ui/primitives'\n\nexport interface CheckboxProps extends ArkCheckbox.RootProps {}\n\nexport const Checkbox = forwardRef<HTMLLabelElement, CheckboxProps>((props, ref) => {\n  const { children, ...rootProps } = props\n\n  return (\n    <ArkCheckbox.Root ref={ref} {...rootProps}>\n      <ArkCheckbox.Control>\n        <ArkCheckbox.Indicator>\n          <CheckIcon />\n        </ArkCheckbox.Indicator>\n        <ArkCheckbox.Indicator indeterminate>\n          <MinusIcon />\n        </ArkCheckbox.Indicator>\n      </ArkCheckbox.Control>\n      {children && <ArkCheckbox.Label>{children}</ArkCheckbox.Label>}\n      <ArkCheckbox.HiddenInput />\n    </ArkCheckbox.Root>\n  )\n})\n\nCheckbox.displayName = 'Checkbox'\n\nconst CheckIcon = () => (\n  <svg viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <title>Check Icon</title>\n    <path\n      d=\"M11.6666 3.5L5.24992 9.91667L2.33325 7\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nconst MinusIcon = () => (\n  <svg viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <title>Minus Icon</title>\n    <path\n      d=\"M2.91675 7H11.0834\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n",
      "exports": "export { Checkbox, type CheckboxProps } from './checkbox'"
    }
  ]
}
