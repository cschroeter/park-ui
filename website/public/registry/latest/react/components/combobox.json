{
  "id": "combobox",
  "name": "Combobox",
  "filename": "combobox.tsx",
  "variants": {
    "primitive": "import type { Assign } from '@ark-ui/react'\nimport { Combobox } from '@ark-ui/react/combobox'\nimport { type ComboboxVariantProps, combobox } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(combobox)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<\n    Assign<HTMLStyledProps<'div'>, Combobox.RootProviderBaseProps<Combobox.CollectionItem>>,\n    ComboboxVariantProps\n  >\n>(Combobox.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<\n    Assign<HTMLStyledProps<'div'>, Combobox.RootBaseProps<Combobox.CollectionItem>>,\n    ComboboxVariantProps\n  >\n>(Combobox.Root, 'root')\n\nexport const ClearTrigger = withContext<\n  HTMLButtonElement,\n  Assign<HTMLStyledProps<'button'>, Combobox.ClearTriggerBaseProps>\n>(Combobox.ClearTrigger, 'clearTrigger')\n\nexport const Content = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ContentBaseProps>\n>(Combobox.Content, 'content')\n\nexport const Control = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ControlBaseProps>\n>(Combobox.Control, 'control')\n\nexport const Input = withContext<\n  HTMLInputElement,\n  Assign<HTMLStyledProps<'input'>, Combobox.InputBaseProps>\n>(Combobox.Input, 'input')\n\nexport const ItemGroupLabel = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ItemGroupLabelBaseProps>\n>(Combobox.ItemGroupLabel, 'itemGroupLabel')\n\nexport const ItemGroup = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ItemGroupBaseProps>\n>(Combobox.ItemGroup, 'itemGroup')\n\nexport const ItemIndicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ItemIndicatorBaseProps>\n>(Combobox.ItemIndicator, 'itemIndicator')\n\nexport const Item = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ItemBaseProps>\n>(Combobox.Item, 'item')\n\nexport const ItemText = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'span'>, Combobox.ItemTextBaseProps>\n>(Combobox.ItemText, 'itemText')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, Combobox.LabelBaseProps>\n>(Combobox.Label, 'label')\n\nexport const List = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.ListBaseProps>\n>(Combobox.List, 'list')\n\nexport const Positioner = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Combobox.PositionerBaseProps>\n>(Combobox.Positioner, 'positioner')\n\nexport const Trigger = withContext<\n  HTMLButtonElement,\n  Assign<HTMLStyledProps<'button'>, Combobox.TriggerBaseProps>\n>(Combobox.Trigger, 'trigger')\n\nexport { ComboboxContext as Context } from '@ark-ui/react/combobox'\n\nexport type {\n  ComboboxHighlightChangeDetails as HighlightChangeDetails,\n  ComboboxInputValueChangeDetails as InputValueChangeDetails,\n  ComboboxOpenChangeDetails as OpenChangeDetails,\n  ComboboxValueChangeDetails as ValueChangeDetails,\n} from '@ark-ui/react/combobox'\n"
  }
}
