{
  "id": "pin-input",
  "name": "Pin Input",
  "variants": [
    {
      "file": "primitives/pin-input.tsx",
      "content": "'use client'\nimport type { Assign } from '@ark-ui/react'\nimport { PinInput } from '@ark-ui/react/pin-input'\nimport { type PinInputVariantProps, pinInput } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(pinInput)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, PinInput.RootProviderBaseProps>, PinInputVariantProps>\n>(PinInput.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, PinInput.RootBaseProps>, PinInputVariantProps>\n>(PinInput.Root, 'root')\n\nexport const Control = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, PinInput.ControlBaseProps>\n>(PinInput.Control, 'control')\n\nexport const Input = withContext<\n  HTMLInputElement,\n  Assign<HTMLStyledProps<'input'>, PinInput.InputBaseProps>\n>(PinInput.Input, 'input')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, PinInput.LabelBaseProps>\n>(PinInput.Label, 'label')\n\nexport {\n  PinInputContext as Context,\n  PinInputHiddenInput as HiddenInput,\n} from '@ark-ui/react/pin-input'\n",
      "exports": "export * as PinInput from './pin-input'"
    },
    {
      "file": "pin-input.tsx",
      "content": "import { forwardRef } from 'react'\nimport { PinInput as ArkPinInput } from '~/components/ui/primitives'\nimport { Input } from '~/components/ui/primitives'\n\nexport interface PinInputProps extends ArkPinInput.RootProps {\n  /**\n   * The number of inputs to render.\n   * @default 4\n   */\n  length?: number\n}\n\nexport const PinInput = forwardRef<HTMLDivElement, PinInputProps>((props, ref) => {\n  const { children, length = 4, ...rootProps } = props\n\n  return (\n    <ArkPinInput.Root ref={ref} {...rootProps}>\n      {children && <ArkPinInput.Label>{children}</ArkPinInput.Label>}\n      <ArkPinInput.Control>\n        {Array.from({ length }, (_, index) => index).map((id, index) => (\n          <ArkPinInput.Input key={id} index={index} asChild>\n            <Input size={rootProps.size} />\n          </ArkPinInput.Input>\n        ))}\n      </ArkPinInput.Control>\n      <ArkPinInput.HiddenInput />\n    </ArkPinInput.Root>\n  )\n})\n\nPinInput.displayName = 'PinInput'\n",
      "exports": "export { PinInput, type PinInputProps } from './pin-input'"
    }
  ]
}
