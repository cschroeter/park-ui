{
  "id": "slider",
  "name": "Slider",
  "variants": [
    {
      "file": "styled/slider.tsx",
      "content": "'use client'\nimport type { Assign } from '@ark-ui/react'\nimport { Slider } from '@ark-ui/react/slider'\nimport { type SliderVariantProps, slider } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from './utils/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(slider)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, Slider.RootProviderBaseProps>, SliderVariantProps>\n>(Slider.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, Slider.RootBaseProps>, SliderVariantProps>\n>(Slider.Root, 'root')\n\nexport const Control = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Slider.ControlBaseProps>\n>(Slider.Control, 'control')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, Slider.LabelBaseProps>\n>(Slider.Label, 'label')\n\nexport const MarkerGroup = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Slider.MarkerGroupBaseProps>\n>(Slider.MarkerGroup, 'markerGroup')\n\nexport const Marker = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, Slider.MarkerBaseProps>\n>(Slider.Marker, 'marker')\n\nexport const Range = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Slider.RangeBaseProps>\n>(Slider.Range, 'range')\n\nexport const Thumb = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Slider.ThumbBaseProps>\n>(Slider.Thumb, 'thumb')\n\nexport const Track = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, Slider.TrackBaseProps>\n>(Slider.Track, 'track')\n\nexport const ValueText = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'span'>, Slider.ValueTextBaseProps>\n>(Slider.ValueText, 'valueText')\n\nexport {\n  SliderContext as Context,\n  SliderHiddenInput as HiddenInput,\n} from '@ark-ui/react/slider'\n"
    },
    {
      "file": "slider.tsx",
      "content": "'use client'\nimport { type ReactNode, forwardRef } from 'react'\nimport * as StyledSlider from './styled/slider'\n\nexport interface SliderProps extends StyledSlider.RootProps {\n  children?: ReactNode\n  marks?: {\n    value: number\n    label?: ReactNode\n  }[]\n}\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n  const { children, marks, ...rootProps } = props\n\n  return (\n    <StyledSlider.Root ref={ref} {...rootProps}>\n      <StyledSlider.Context>\n        {(api) => (\n          <>\n            {children && <StyledSlider.Label>{children}</StyledSlider.Label>}\n            <StyledSlider.Control>\n              <StyledSlider.Track>\n                <StyledSlider.Range />\n              </StyledSlider.Track>\n              {api.value.map((_, index) => (\n                <StyledSlider.Thumb key={index} index={index}>\n                  <StyledSlider.HiddenInput />\n                </StyledSlider.Thumb>\n              ))}\n            </StyledSlider.Control>\n            {props.marks && (\n              <StyledSlider.MarkerGroup>\n                {props.marks.map((mark) => (\n                  <StyledSlider.Marker key={mark.value} value={mark.value}>\n                    {mark.label}\n                  </StyledSlider.Marker>\n                ))}\n              </StyledSlider.MarkerGroup>\n            )}\n          </>\n        )}\n      </StyledSlider.Context>\n    </StyledSlider.Root>\n  )\n})\n\nSlider.displayName = 'Slider'\n"
    }
  ]
}
