{
  "id": "rating-group",
  "name": "Rating Group",
  "variants": [
    {
      "file": "styled/rating-group.tsx",
      "content": "'use client'\nimport type { Assign } from '@ark-ui/react'\nimport { RatingGroup } from '@ark-ui/react/rating-group'\nimport { type RatingGroupVariantProps, ratingGroup } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from './utils/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(ratingGroup)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, RatingGroup.RootProviderBaseProps>, RatingGroupVariantProps>\n>(RatingGroup.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, RatingGroup.RootBaseProps>, RatingGroupVariantProps>\n>(RatingGroup.Root, 'root')\n\nexport const Control = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, RatingGroup.ControlBaseProps>\n>(RatingGroup.Control, 'control')\n\nexport const Item = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, RatingGroup.ItemBaseProps>\n>(RatingGroup.Item, 'item')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, RatingGroup.LabelBaseProps>\n>(RatingGroup.Label, 'label')\n\nexport {\n  RatingGroupContext as Context,\n  RatingGroupItemContext as ItemContext,\n  RatingGroupHiddenInput as HiddenInput,\n} from '@ark-ui/react/rating-group'\n"
    },
    {
      "file": "rating-group.tsx",
      "content": "'use client'\nimport { forwardRef } from 'react'\nimport * as StyledRatingGroup from './styled/rating-group'\n\nexport interface RatingGroupProps extends StyledRatingGroup.RootProps {}\n\nexport const RatingGroup = forwardRef<HTMLDivElement, RatingGroupProps>((props, ref) => {\n  const { children, ...rootProps } = props\n  return (\n    <StyledRatingGroup.Root ref={ref} {...rootProps}>\n      {children && <StyledRatingGroup.Label>{children}</StyledRatingGroup.Label>}\n      <StyledRatingGroup.Control>\n        <StyledRatingGroup.Context>\n          {({ items }) =>\n            items.map((index) => (\n              <StyledRatingGroup.Item key={index} index={index}>\n                <StyledRatingGroup.ItemContext>\n                  {(item) => <StarIcon isHalf={item.half} />}\n                </StyledRatingGroup.ItemContext>\n              </StyledRatingGroup.Item>\n            ))\n          }\n        </StyledRatingGroup.Context>\n      </StyledRatingGroup.Control>\n      <StyledRatingGroup.HiddenInput />\n    </StyledRatingGroup.Root>\n  )\n})\n\nRatingGroup.displayName = 'RatingGroup'\n\ntype IconProps = {\n  isHalf: boolean\n}\n\nconst StarIcon = (props: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"inherit\"\n    stroke=\"inherit\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <title>Star Icon</title>\n    <defs>\n      <linearGradient id=\"half\">\n        <stop offset=\"50%\" stopColor=\"var(--colors-color-palette-default)\" />\n        <stop offset=\"50%\" stopColor=\"var(--colors-bg-emphasized)\" />\n      </linearGradient>\n    </defs>\n    <polygon\n      fill={props.isHalf ? 'url(#half)' : 'inherit'}\n      points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"\n    />\n  </svg>\n)\n"
    }
  ]
}
