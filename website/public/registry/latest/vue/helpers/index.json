[
  {
    "filename": "create-style-context.tsx",
    "content": "import { type ComputedRef, computed, defineComponent, inject, provide } from 'vue'\nimport { styled } from '../../styled-system/jsx'\nimport type { ElementType } from '../../styled-system/types'\n\ntype Props = Record<string, unknown>\ntype Recipe = {\n  (props?: Props): Props\n  splitVariantProps: (props: Props) => [Props, Props]\n}\ntype Slot<R extends Recipe> = keyof ReturnType<R>\ntype StyleContext<R extends Recipe> = Record<Slot<R>, string>\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const withProvider = <P,>(Component: ElementType, slot: Slot<R>) => {\n    const StyledComponent = styled(Component)\n\n    return defineComponent<P>({\n      setup(props, { slots }) {\n        const splittedProps = computed(() => {\n          return recipe.splitVariantProps(props)\n        })\n\n        const styles = computed(() => {\n          const [variantProps] = splittedProps.value\n          return recipe(variantProps) as StyleContext<R>\n        })\n\n        provide('styles', styles)\n        return () => (\n          <StyledComponent {...splittedProps.value[1]} class={styles.value[slot]}>\n            {slots.default?.()}\n          </StyledComponent>\n        )\n      },\n    })\n  }\n\n  const withContext = <P,>(Component: ElementType, slot: Slot<R>) => {\n    const StyledComponent = styled(Component)\n\n    return defineComponent<P>({\n      setup(props, { slots }) {\n        const slotStyles = inject<ComputedRef<StyleContext<R>>>('styles')\n\n        return () => (\n          <StyledComponent {...props} class={slotStyles?.value?.[slot]}>\n            {slots.default?.()}\n          </StyledComponent>\n        )\n      },\n    })\n  }\n\n  return { withProvider, withContext }\n}\n"
  }
]
