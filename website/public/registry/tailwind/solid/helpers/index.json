{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import {\n  createContext,\n  splitProps,\n  useContext,\n  type ComponentProps,\n  type ValidComponent,\n} from 'solid-js'\nimport { Dynamic } from 'solid-js/web'\n\ntype Recipe = {\n  (props: Record<string, unknown>): Record<string, CallableFunction>\n  variantKeys: string[]\n}\n\ntype PolymorphicProps<T extends ValidComponent, P = ComponentProps<T>> = {\n  [K in keyof P]: P[K]\n}\n\ntype Slot<R extends Recipe> = keyof ReturnType<R>\ntype SlotRecipe<R extends Recipe> = Record<Slot<R>, CallableFunction>\ntype VariantProps<R extends Recipe> = Parameters<R>[0]\n\nconst cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<SlotRecipe<R> | null>(null)\n\n  const withProvider = <T extends ValidComponent>(Component: T, slot?: string) => {\n    const StyledComponent = (props: PolymorphicProps<T> & VariantProps<R>) => {\n      const [variantProps, componentProps] = splitProps(props, [\n        'class',\n        ...recipe.variantKeys,\n      ]) as unknown as [VariantProps<R>, PolymorphicProps<T>]\n      const styles = recipe(variantProps) as SlotRecipe<R>\n\n      return (\n        <StyleContext.Provider value={styles}>\n          <Dynamic\n            component={Component}\n            {...componentProps}\n            class={cx(styles?.[slot ?? '']?.(), props.class)}\n          />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withContext = <T extends ValidComponent>(Component: T, slot?: string): T => {\n    if (!slot) return Component\n    const StyledComponent = (props: PolymorphicProps<T>) => {\n      const styles = useContext(StyleContext)\n      return (\n        <Dynamic component={Component} {...props} class={cx(styles?.[slot]?.(), props.class)} />\n      )\n    }\n    return StyledComponent as T\n  }\n\n  return {\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
