{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import { type Component, type JSX, createContext, splitProps, useContext } from 'solid-js'\nimport { Dynamic } from 'solid-js/web'\n\ntype Recipe = {\n  (props: Record<string, unknown>): Record<string, CallableFunction>\n  variantKeys: string[]\n}\ntype Slot<R extends Recipe> = keyof ReturnType<R>\ntype ElementType<P = {}> = keyof JSX.IntrinsicElements | Component<P>\n\nconst cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<Record<Slot<R>, () => string> | null>(null)\n\n  const withRootProvider = <P extends {}>(\n    Component: ElementType<P>,\n  ): ((props: P) => JSX.Element) => {\n    const StyledComponent = (props: P) => {\n      const slotStyles = recipe(props) as Record<Slot<R>, () => string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Component {...props} />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withProvider = <P extends { class?: string }>(\n    Component: ElementType<P>,\n    slot: Slot<R>,\n  ): ((props: P) => JSX.Element) => {\n    const StyledComponent = (props: P) => {\n      const [variantProps, componentProps] = splitProps(props, [\n        'class',\n        ...(recipe.variantKeys as Array<keyof P>),\n      ])\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, () => string>\n\n      return (\n        <StyleContext.Provider value={slotStyles}>\n          <Dynamic\n            component={Component}\n            {...componentProps}\n            class={cx(slotStyles?.[slot](), props.class)}\n          />\n        </StyleContext.Provider>\n      )\n    }\n    return StyledComponent\n  }\n\n  const withContext = <P extends { class?: string }>(\n    Component: ElementType<P>,\n    slot: Slot<R>,\n  ): ((props: P) => JSX.Element) => {\n    const StyledComponent = (props: P) => {\n      const slotStyles = useContext(StyleContext)\n      return (\n        <Dynamic component={Component} {...props} class={cx(slotStyles?.[slot](), props.class)} />\n      )\n    }\n    return StyledComponent\n  }\n\n  return {\n    withRootProvider,\n    withProvider,\n    withContext,\n  }\n}\n"
    }
  ]
}
