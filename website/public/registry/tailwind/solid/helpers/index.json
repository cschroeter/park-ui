{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "import {\n  createComponent,\n  createContext,\n  mergeProps,\n  splitProps,\n  useContext,\n  type ComponentProps,\n  type ValidComponent,\n} from 'solid-js'\nimport { Dynamic, DynamicProps } from 'solid-js/web'\n\ntype Recipe = {\n  (props: Record<string, unknown>): Record<string, CallableFunction>\n  variantKeys: string[]\n}\n\ntype Slot<R extends Recipe> = keyof ReturnType<R>\ntype SlotRecipe<R extends Recipe> = Record<Slot<R>, CallableFunction>\ntype VariantProps<R extends Recipe> = Parameters<R>[0]\n\nconst cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<SlotRecipe<R> | null>(null)\n\n  const withProvider = <T extends ValidComponent, P = ComponentProps<T>>(\n    Component: T,\n    slot?: Slot<R>,\n  ) => {\n    const Comp = (props: Partial<DynamicProps<T, P>> & VariantProps<R>) => {\n      const [variantProps, dynamicProps] = splitProps(props, [\n        'class',\n        'className',\n        ...recipe.variantKeys,\n      ])\n      const styles = recipe(variantProps) as SlotRecipe<R>\n\n      return (\n        <StyleContext.Provider value={styles}>\n          {createComponent(\n            Dynamic,\n            mergeProps(dynamicProps, {\n              component: Component,\n              class: styles?.[slot ?? '']?.(),\n            }),\n          )}\n        </StyleContext.Provider>\n      )\n    }\n    return Comp\n  }\n\n  const withContext = <T extends ValidComponent, P = ComponentProps<T>>(\n    Component: T,\n    slot?: Slot<R>,\n  ): T => {\n    if (!slot) return Component\n    const Comp = (props: Partial<DynamicProps<T, P>> & { class?: string }) => {\n      const styles = useContext(StyleContext)\n\n      return createComponent(\n        Dynamic,\n        mergeProps(props, {\n          component: Component,\n          class: cx(styles?.[slot]?.(), props.class),\n        }),\n      )\n    }\n    return Comp as T\n  }\n\n  return {\n    withProvider,\n    withContext,\n  }\n}\n"
    },
    {
      "filename": "styled.tsx",
      "content": "import { JSX, createSignal } from 'solid-js'\n\ntype ProviderComponentProps<ComponentProps extends {}> = (prop: ComponentProps) => JSX.Element\n\nexport const styled = <ComponentProps extends {}>(\n  Component: ProviderComponentProps<ComponentProps>,\n  createStyles: (...args: any) => any,\n) => {\n  return (props: ComponentProps) => {\n    const classNames = createStyles(props)\n    const [ref] = createSignal(null)\n\n    const componentProps = {\n      ...props,\n      className: classNames,\n      ref,\n    } as any\n\n    return <>{Component(componentProps)}</>\n  }\n}\n"
    }
  ]
}
