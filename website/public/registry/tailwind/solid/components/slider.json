{
  "files": [
    {
      "filename": "slider.tsx",
      "content": "import { Slider as ArkSlider, type SliderRootProps } from '@ark-ui/solid'\nimport { Index, type JSX, Show, children, splitProps } from 'solid-js'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nexport interface SliderProps extends SliderRootProps, SliderVariantProps {\n  marks?: {\n    value: number\n    label?: JSX.Element\n  }[]\n}\n\nexport const Slider = (props: SliderProps) => {\n  const [variantProps, sliderProps] = splitProps(props, ['size', 'class'])\n  const [localProps, rootProps] = splitProps(sliderProps, ['marks', 'children'])\n  const getChildren = children(() => localProps.children)\n  const { root, control, label, marker, markerGroup, range, thumb, track } = slider(variantProps)\n\n  return (\n    <ArkSlider.Root class={root()} {...rootProps}>\n      <Show when={getChildren()}>\n        <ArkSlider.Label class={label()}>{getChildren()}</ArkSlider.Label>\n      </Show>\n      <ArkSlider.Control class={control()}>\n        <ArkSlider.Track class={track()}>\n          <ArkSlider.Range class={range()} />\n        </ArkSlider.Track>\n        <ArkSlider.Context>\n          {(api) => (\n            <Index each={api().value}>\n              {(_, index) => <ArkSlider.Thumb index={index} class={thumb()} />}\n            </Index>\n          )}\n        </ArkSlider.Context>\n      </ArkSlider.Control>\n      <Show when={localProps.marks}>\n        <ArkSlider.MarkerGroup class={markerGroup()}>\n          <Index each={localProps.marks}>\n            {(mark) => (\n              <ArkSlider.Marker value={mark().value} class={marker()}>\n                {mark().label}\n              </ArkSlider.Marker>\n            )}\n          </Index>\n        </ArkSlider.MarkerGroup>\n      </Show>\n    </ArkSlider.Root>\n  )\n}\n\ntype SliderVariantProps = VariantProps<typeof slider>\n\nconst slider = tv(\n  {\n    base: 'slider',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'slider__root',\n      label: 'slider__label',\n      thumb: 'slider__thumb',\n      valueText: 'slider__valueText',\n      track: 'slider__track',\n      range: 'slider__range',\n      control: 'slider__control',\n      markerGroup: 'slider__markerGroup',\n      marker: 'slider__marker',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'slider__root--size_sm',\n          label: 'slider__label--size_sm',\n          thumb: 'slider__thumb--size_sm',\n          valueText: 'slider__valueText--size_sm',\n          track: 'slider__track--size_sm',\n          range: 'slider__range--size_sm',\n          control: 'slider__control--size_sm',\n          markerGroup: 'slider__markerGroup--size_sm',\n          marker: 'slider__marker--size_sm',\n        },\n        md: {\n          root: 'slider__root--size_md',\n          label: 'slider__label--size_md',\n          thumb: 'slider__thumb--size_md',\n          valueText: 'slider__valueText--size_md',\n          track: 'slider__track--size_md',\n          range: 'slider__range--size_md',\n          control: 'slider__control--size_md',\n          markerGroup: 'slider__markerGroup--size_md',\n          marker: 'slider__marker--size_md',\n        },\n        lg: {\n          root: 'slider__root--size_lg',\n          label: 'slider__label--size_lg',\n          thumb: 'slider__thumb--size_lg',\n          valueText: 'slider__valueText--size_lg',\n          track: 'slider__track--size_lg',\n          range: 'slider__range--size_lg',\n          control: 'slider__control--size_lg',\n          markerGroup: 'slider__markerGroup--size_lg',\n          marker: 'slider__marker--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\n",
      "hasMultipleParts": false
    }
  ]
}
