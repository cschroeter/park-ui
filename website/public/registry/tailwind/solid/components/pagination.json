{
  "files": [
    {
      "filename": "pagination.tsx",
      "content": "import { Pagination as ArkPagination, type PaginationRootProps } from '@ark-ui/solid'\nimport { For, splitProps } from 'solid-js'\nimport { type VariantProps, tv } from 'tailwind-variants'\nimport { Button } from '~/components/ui/button'\nimport { IconButton } from '~/components/ui/icon-button'\n\nexport interface PaginationProps extends PaginationRootProps, PaginationVariantProps {}\n\nexport const Pagination = (props: PaginationProps) => {\n  const [variantProps, rootProps] = splitProps(props, ['class'])\n  const { root, ellipsis, item, prevTrigger, nextTrigger } = pagination(variantProps)\n\n  return (\n    <ArkPagination.Root class={root()} {...rootProps}>\n      <ArkPagination.PrevTrigger class={prevTrigger()}>\n        <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n          <ChevronLeftIcon />\n        </IconButton>\n      </ArkPagination.PrevTrigger>\n      <ArkPagination.Context>\n        {(pagiation) => (\n          <For each={pagiation().pages}>\n            {(page, index) =>\n              page.type === 'page' ? (\n                <ArkPagination.Item\n                  {...page}\n                  asChild={(props) => <Button {...props} variant=\"outline\" />}\n                  class={item()}\n                >\n                  {page.value}\n                </ArkPagination.Item>\n              ) : (\n                <ArkPagination.Ellipsis index={index()} class={ellipsis()}>\n                  &#8230;\n                </ArkPagination.Ellipsis>\n              )\n            }\n          </For>\n        )}\n      </ArkPagination.Context>\n      <ArkPagination.NextTrigger class={nextTrigger()}>\n        <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n          <ChevronRightIcon />\n        </IconButton>\n      </ArkPagination.NextTrigger>\n    </ArkPagination.Root>\n  )\n}\n\ntype PaginationVariantProps = VariantProps<typeof pagination>\n\nconst pagination = tv(\n  {\n    base: 'pagination',\n    slots: {\n      root: 'pagination__root',\n      item: 'pagination__item',\n      ellipsis: 'pagination__ellipsis',\n      prevTrigger: 'pagination__prevTrigger',\n      nextTrigger: 'pagination__nextTrigger',\n    },\n    variants: {},\n  },\n  { twMerge: false },\n)\n\nconst ChevronLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Left</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m15 18l-6-6l6-6\"\n    />\n  </svg>\n)\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
