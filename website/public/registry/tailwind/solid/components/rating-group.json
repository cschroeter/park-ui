{
  "files": [
    {
      "filename": "rating-group.tsx",
      "content": "import { RatingGroup as ArkRatingGroup, type RatingGroupRootProps } from '@ark-ui/solid'\nimport { Index, Show, children, splitProps } from 'solid-js'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nexport interface RatingGroupProps extends RatingGroupRootProps, RatingGroupVariantProps {}\n\nexport const RatingGroup = (props: RatingGroupProps) => {\n  const [variantProps, ratingGroupProps] = splitProps(props, ['size', 'class'])\n  const [localProps, rootProps] = splitProps(ratingGroupProps, ['children'])\n  const getChildren = children(() => localProps.children)\n  const { root, control, label, item } = ratingGroup(variantProps)\n\n  return (\n    <ArkRatingGroup.Root class={root()} {...rootProps}>\n      <Show when={getChildren()}>\n        <ArkRatingGroup.Label class={label()}>{getChildren()}</ArkRatingGroup.Label>\n      </Show>\n      <ArkRatingGroup.Control class={control()}>\n        <ArkRatingGroup.Context>\n          {(context) => (\n            <Index each={context().items}>\n              {(index) => (\n                <ArkRatingGroup.Item class={item()} index={index()}>\n                  <ArkRatingGroup.ItemContext>\n                    {(item) => (\n                      <Show when={item().highlighted} fallback={<StarIcon />}>\n                        <StarIcon half={item().half} />\n                      </Show>\n                    )}\n                  </ArkRatingGroup.ItemContext>\n                </ArkRatingGroup.Item>\n              )}\n            </Index>\n          )}\n        </ArkRatingGroup.Context>\n      </ArkRatingGroup.Control>\n    </ArkRatingGroup.Root>\n  )\n}\n\ntype RatingGroupVariantProps = VariantProps<typeof ratingGroup>\n\nconst ratingGroup = tv(\n  {\n    base: 'ratingGroup',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'ratingGroup__root',\n      label: 'ratingGroup__label',\n      item: 'ratingGroup__item',\n      control: 'ratingGroup__control',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'ratingGroup__root--size_sm',\n          label: 'ratingGroup__label--size_sm',\n          item: 'ratingGroup__item--size_sm',\n          control: 'ratingGroup__control--size_sm',\n        },\n        md: {\n          root: 'ratingGroup__root--size_md',\n          label: 'ratingGroup__label--size_md',\n          item: 'ratingGroup__item--size_md',\n          control: 'ratingGroup__control--size_md',\n        },\n        lg: {\n          root: 'ratingGroup__root--size_lg',\n          label: 'ratingGroup__label--size_lg',\n          item: 'ratingGroup__item--size_lg',\n          control: 'ratingGroup__control--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\n\ninterface Props {\n  half?: boolean\n}\n\nconst StarIcon = (props: Props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"inherit\"\n    stroke=\"inherit\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  >\n    <title>Star</title>\n    <defs>\n      <linearGradient id=\"half\">\n        <stop offset=\"50%\" stop-color=\"var(--colors-color-palette-default)\" />\n        <stop offset=\"50%\" stop-color=\"var(--colors-bg-emphasized)\" />\n      </linearGradient>\n    </defs>\n    <polygon\n      fill={props.half ? 'url(#half)' : 'inherit'}\n      points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
