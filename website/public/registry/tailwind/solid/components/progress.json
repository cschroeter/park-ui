{
  "files": [
    {
      "filename": "progress.tsx",
      "content": "import { Progress as ArkProgress, type ProgressRootProps } from '@ark-ui/solid'\nimport { Show, children, splitProps } from 'solid-js'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nexport interface ProgressProps extends ProgressRootProps, ProgressVariantProps {\n  /**\n   * The type of progress to render.\n   * @default linear\n   */\n  type?: 'linear' | 'circular'\n}\n\nexport const Progress = (props: ProgressProps) => {\n  const [variantProps, progressProps] = splitProps(props, ['class', 'size'])\n  const [localProps, rootProps] = splitProps(progressProps, ['children', 'type'])\n  const getChildren = children(() => localProps.children)\n  const { root, label, track, range, circle, circleRange, circleTrack, valueText } =\n    progress(variantProps)\n\n  return (\n    <ArkProgress.Root class={root({ class: variantProps.class })} {...rootProps}>\n      <Show when={getChildren()}>\n        <ArkProgress.Label class={label()}>{getChildren()}</ArkProgress.Label>\n      </Show>\n      <Show\n        when={localProps.type === 'circular'}\n        fallback={\n          <ArkProgress.Track class={track()}>\n            <ArkProgress.Range class={range()} />\n          </ArkProgress.Track>\n        }\n      >\n        <ArkProgress.Circle class={circle()}>\n          <ArkProgress.CircleTrack class={circleTrack()} />\n          <ArkProgress.CircleRange class={circleRange()} />\n          <ArkProgress.ValueText class={valueText()} />\n        </ArkProgress.Circle>\n      </Show>\n      <ArkProgress.ValueText class={valueText()} />\n    </ArkProgress.Root>\n  )\n}\n\ntype ProgressVariantProps = VariantProps<typeof progress>\n\nconst progress = tv(\n  {\n    base: 'progress',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'progress__root',\n      label: 'progress__label',\n      track: 'progress__track',\n      range: 'progress__range',\n      valueText: 'progress__valueText',\n      view: 'progress__view',\n      circle: 'progress__circle',\n      circleTrack: 'progress__circleTrack',\n      circleRange: 'progress__circleRange',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'progress__root--size_sm',\n          label: 'progress__label--size_sm',\n          track: 'progress__track--size_sm',\n          range: 'progress__range--size_sm',\n          valueText: 'progress__valueText--size_sm',\n          view: 'progress__view--size_sm',\n          circle: 'progress__circle--size_sm',\n          circleTrack: 'progress__circleTrack--size_sm',\n          circleRange: 'progress__circleRange--size_sm',\n        },\n        md: {\n          root: 'progress__root--size_md',\n          label: 'progress__label--size_md',\n          track: 'progress__track--size_md',\n          range: 'progress__range--size_md',\n          valueText: 'progress__valueText--size_md',\n          view: 'progress__view--size_md',\n          circle: 'progress__circle--size_md',\n          circleTrack: 'progress__circleTrack--size_md',\n          circleRange: 'progress__circleRange--size_md',\n        },\n        lg: {\n          root: 'progress__root--size_lg',\n          label: 'progress__label--size_lg',\n          track: 'progress__track--size_lg',\n          range: 'progress__range--size_lg',\n          valueText: 'progress__valueText--size_lg',\n          view: 'progress__view--size_lg',\n          circle: 'progress__circle--size_lg',\n          circleTrack: 'progress__circleTrack--size_lg',\n          circleRange: 'progress__circleRange--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\n",
      "hasMultipleParts": false
    }
  ]
}
