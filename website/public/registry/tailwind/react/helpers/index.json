{
  "files": [
    {
      "filename": "create-style-context.tsx",
      "content": "'use client'\nimport { createContext, forwardRef, useContext, type ComponentProps, type ElementType } from 'react'\n\ntype Recipe = (props: any) => any\ntype VariantProps<R extends Recipe> = Parameters<R>[0]\n\nconst cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')\n\nexport const createStyleContext = <\n  StylesFunction extends Recipe,\n  Slot extends keyof ReturnType<StylesFunction>,\n>(\n  createStyles: StylesFunction,\n) => {\n  const StyleContext = createContext<ReturnType<typeof createStyles> | null>(null)\n\n  const withProvider = <C extends ElementType>(Component: C, slot?: Slot) => {\n    const Comp = forwardRef((props: ComponentProps<C> & VariantProps<StylesFunction>, ref) => {\n      const styles = createStyles(props)\n      const variantClassNames = styles[slot ?? '']?.()\n      return (\n        <StyleContext.Provider value={styles}>\n          <Component ref={ref} {...props} className={cx(variantClassNames, props.className)} />\n        </StyleContext.Provider>\n      )\n    })\n    // @ts-expect-error JSX.IntrinsicElements do not have a displayName but Function and Class components do\n    Comp.displayName = Component.displayName || Component.name || 'Component'\n    return Comp\n  }\n\n  const withContext = <C extends ElementType>(Component: C, slot?: Slot) => {\n    type ComponentPropsWithVariants = ComponentProps<C>\n\n    const Comp = forwardRef((props: ComponentPropsWithVariants, ref) => {\n      const slotRecipe = useContext(StyleContext)\n      const variantClassNames = slotRecipe?.[slot ?? '']?.()\n\n      return (\n        <Component\n          ref={ref}\n          {...(props as any)}\n          className={cx(variantClassNames, props.className)}\n        />\n      )\n    })\n\n    // @ts-expect-error JSX.IntrinsicElements do not have a displayName but Function and Class components do\n    Comp.displayName = Component.displayName || Component.name || 'Component'\n    return Comp\n  }\n\n  return {\n    withProvider,\n    withContext,\n  }\n}\n"
    },
    {
      "filename": "styled.tsx",
      "content": "import { forwardRef, type ExoticComponent } from 'react'\n\nconst mergeProps = <T extends Record<string, any>>(baseProps: T, propsToMerge: Partial<T>): T => ({\n  ...baseProps,\n  ...propsToMerge,\n})\n\ntype ProviderComponentProps<ComponentProps extends {}> =\n  | ExoticComponent<ComponentProps>\n  | ((prop: ComponentProps) => JSX.Element)\n\nexport const styled = <ComponentProps extends {}>(\n  Component: ProviderComponentProps<ComponentProps>,\n  createStyles: (...args: any) => any,\n) => {\n  const Comp = forwardRef<typeof Component, ComponentProps>((props, ref) => {\n    const classNames = createStyles(props)\n\n    const componentProps = mergeProps(props, {\n      className: classNames,\n    } as any) // TODO remove variant props from component props\n\n    return <Component {...componentProps} ref={ref} />\n  })\n  // @ts-expect-error - it exists\n  Comp.displayName = Component.displayName || Component.name\n  return Comp\n}\n"
    }
  ]
}
