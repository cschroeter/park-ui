{
  "files": [
    {
      "filename": "slider.tsx",
      "content": "import { Slider as ArkSlider, type SliderRootProps } from '@ark-ui/react/slider'\nimport { type ReactNode, forwardRef } from 'react'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nexport interface SliderProps extends SliderRootProps, SliderVariantProps {\n  marks?: {\n    value: number\n    label?: ReactNode\n  }[]\n}\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n  const { children, className, size, ...rootProps } = props\n  const { root, label, control, track, range, thumb, marker, markerGroup } = slider({ size })\n\n  return (\n    <ArkSlider.Root ref={ref} className={root({ className })} {...rootProps}>\n      <ArkSlider.Context>\n        {(api) => (\n          <>\n            {children && <ArkSlider.Label className={label()}>{children}</ArkSlider.Label>}\n            <ArkSlider.Control className={control()}>\n              <ArkSlider.Track className={track()}>\n                <ArkSlider.Range className={range()} />\n              </ArkSlider.Track>\n              {api.value.map((_, index) => (\n                <ArkSlider.Thumb key={index} index={index} className={thumb()} />\n              ))}\n            </ArkSlider.Control>\n            {props.marks && (\n              <ArkSlider.MarkerGroup className={markerGroup()}>\n                {props.marks.map((mark) => (\n                  <ArkSlider.Marker key={mark.value} value={mark.value} className={marker()}>\n                    {mark.label}\n                  </ArkSlider.Marker>\n                ))}\n              </ArkSlider.MarkerGroup>\n            )}\n          </>\n        )}\n      </ArkSlider.Context>\n    </ArkSlider.Root>\n  )\n})\n\nSlider.displayName = 'Slider'\n\ntype SliderVariantProps = VariantProps<typeof slider>\n\nconst slider = tv(\n  {\n    base: 'slider',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'slider__root',\n      label: 'slider__label',\n      thumb: 'slider__thumb',\n      valueText: 'slider__valueText',\n      track: 'slider__track',\n      range: 'slider__range',\n      control: 'slider__control',\n      markerGroup: 'slider__markerGroup',\n      marker: 'slider__marker',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'slider__root--size_sm',\n          label: 'slider__label--size_sm',\n          thumb: 'slider__thumb--size_sm',\n          valueText: 'slider__valueText--size_sm',\n          track: 'slider__track--size_sm',\n          range: 'slider__range--size_sm',\n          control: 'slider__control--size_sm',\n          markerGroup: 'slider__markerGroup--size_sm',\n          marker: 'slider__marker--size_sm',\n        },\n        md: {\n          root: 'slider__root--size_md',\n          label: 'slider__label--size_md',\n          thumb: 'slider__thumb--size_md',\n          valueText: 'slider__valueText--size_md',\n          track: 'slider__track--size_md',\n          range: 'slider__range--size_md',\n          control: 'slider__control--size_md',\n          markerGroup: 'slider__markerGroup--size_md',\n          marker: 'slider__marker--size_md',\n        },\n        lg: {\n          root: 'slider__root--size_lg',\n          label: 'slider__label--size_lg',\n          thumb: 'slider__thumb--size_lg',\n          valueText: 'slider__valueText--size_lg',\n          track: 'slider__track--size_lg',\n          range: 'slider__range--size_lg',\n          control: 'slider__control--size_lg',\n          markerGroup: 'slider__markerGroup--size_lg',\n          marker: 'slider__marker--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\n",
      "hasMultipleParts": false
    }
  ]
}
