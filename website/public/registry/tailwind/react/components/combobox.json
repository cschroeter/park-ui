{
  "files": [
    {
      "filename": "combobox.tsx",
      "content": "import { Combobox } from '@ark-ui/react/combobox'\nimport { type VariantProps, tv } from 'tailwind-variants'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst combobox = tv(\n  {\n    base: 'combobox',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'combobox__root',\n      label: 'combobox__label',\n      input: 'combobox__input',\n      positioner: 'combobox__positioner',\n      control: 'combobox__control',\n      trigger: 'combobox__trigger',\n      content: 'combobox__content',\n      clearTrigger: 'combobox__clearTrigger',\n      item: 'combobox__item',\n      itemText: 'combobox__itemText',\n      itemIndicator: 'combobox__itemIndicator',\n      itemGroup: 'combobox__itemGroup',\n      itemGroupLabel: 'combobox__itemGroupLabel',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'combobox__root--size_sm',\n          label: 'combobox__label--size_sm',\n          input: 'combobox__input--size_sm',\n          positioner: 'combobox__positioner--size_sm',\n          control: 'combobox__control--size_sm',\n          trigger: 'combobox__trigger--size_sm',\n          content: 'combobox__content--size_sm',\n          clearTrigger: 'combobox__clearTrigger--size_sm',\n          item: 'combobox__item--size_sm',\n          itemText: 'combobox__itemText--size_sm',\n          itemIndicator: 'combobox__itemIndicator--size_sm',\n          itemGroup: 'combobox__itemGroup--size_sm',\n          itemGroupLabel: 'combobox__itemGroupLabel--size_sm',\n        },\n        md: {\n          root: 'combobox__root--size_md',\n          label: 'combobox__label--size_md',\n          input: 'combobox__input--size_md',\n          positioner: 'combobox__positioner--size_md',\n          control: 'combobox__control--size_md',\n          trigger: 'combobox__trigger--size_md',\n          content: 'combobox__content--size_md',\n          clearTrigger: 'combobox__clearTrigger--size_md',\n          item: 'combobox__item--size_md',\n          itemText: 'combobox__itemText--size_md',\n          itemIndicator: 'combobox__itemIndicator--size_md',\n          itemGroup: 'combobox__itemGroup--size_md',\n          itemGroupLabel: 'combobox__itemGroupLabel--size_md',\n        },\n        lg: {\n          root: 'combobox__root--size_lg',\n          label: 'combobox__label--size_lg',\n          input: 'combobox__input--size_lg',\n          positioner: 'combobox__positioner--size_lg',\n          control: 'combobox__control--size_lg',\n          trigger: 'combobox__trigger--size_lg',\n          content: 'combobox__content--size_lg',\n          clearTrigger: 'combobox__clearTrigger--size_lg',\n          item: 'combobox__item--size_lg',\n          itemText: 'combobox__itemText--size_lg',\n          itemIndicator: 'combobox__itemIndicator--size_lg',\n          itemGroup: 'combobox__itemGroup--size_lg',\n          itemGroupLabel: 'combobox__itemGroupLabel--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\nconst { withProvider, withContext } = createStyleContext(combobox)\n\nexport interface RootProps\n  extends Combobox.RootProps<Combobox.CollectionItem>,\n    VariantProps<typeof combobox> {}\nexport const Root = withProvider<HTMLDivElement, RootProps>(Combobox.Root, 'root')\n\nexport const ClearTrigger = withContext<HTMLButtonElement, Combobox.ClearTriggerProps>(\n  Combobox.ClearTrigger,\n  'clearTrigger',\n)\n\nexport const Content = withContext<HTMLDivElement, Combobox.ContentProps>(\n  Combobox.Content,\n  'content',\n)\n\nexport const Control = withContext<HTMLDivElement, Combobox.ControlProps>(\n  Combobox.Control,\n  'control',\n)\n\nexport const Input = withContext<HTMLInputElement, Combobox.InputProps>(Combobox.Input, 'input')\n\nexport const ItemGroupLabel = withContext<HTMLDivElement, Combobox.ItemGroupLabelProps>(\n  Combobox.ItemGroupLabel,\n  'itemGroupLabel',\n)\n\nexport const ItemGroup = withContext<HTMLDivElement, Combobox.ItemGroupProps>(\n  Combobox.ItemGroup,\n  'itemGroup',\n)\n\nexport const ItemIndicator = withContext<HTMLDivElement, Combobox.ItemIndicatorProps>(\n  Combobox.ItemIndicator,\n  'itemIndicator',\n)\n\nexport const Item = withContext<HTMLDivElement, Combobox.ItemProps>(Combobox.Item, 'item')\n\nexport const ItemText = withContext<HTMLDivElement, Combobox.ItemTextProps>(\n  Combobox.ItemText,\n  'itemText',\n)\n\nexport const Label = withContext<HTMLLabelElement, Combobox.LabelProps>(Combobox.Label, 'label')\n\nexport const Positioner = withContext<HTMLDivElement, Combobox.PositionerProps>(\n  Combobox.Positioner,\n  'positioner',\n)\n\nexport const Trigger = withContext<HTMLButtonElement, Combobox.TriggerProps>(\n  Combobox.Trigger,\n  'trigger',\n)\n\nexport {\n  ComboboxContext as Context,\n  type ComboboxContextProps as ContextProps,\n} from '@ark-ui/react/combobox'\n\nexport type {\n  ComboboxHighlightChangeDetails as HighlightChangeDetails,\n  ComboboxInputValueChangeDetails as InputValueChangeDetails,\n  ComboboxOpenChangeDetails as OpenChangeDetails,\n  ComboboxValueChangeDetails as ValueChangeDetails,\n} from '@ark-ui/react/combobox'\n",
      "hasMultipleParts": true
    }
  ]
}
