{
  "files": [
    {
      "filename": "menu.tsx",
      "content": "import { Menu } from '@ark-ui/react/menu'\nimport { type VariantProps, tv } from 'tailwind-variants'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst menu = tv(\n  {\n    base: 'menu',\n    defaultVariants: { size: 'md' },\n    slots: {\n      contextTrigger: 'menu__contextTrigger',\n      trigger: 'menu__trigger',\n      triggerItem: 'menu__triggerItem',\n      indicator: 'menu__indicator',\n      positioner: 'menu__positioner',\n      arrow: 'menu__arrow',\n      arrowTip: 'menu__arrowTip',\n      content: 'menu__content',\n      separator: 'menu__separator',\n      item: 'menu__item',\n      optionItem: 'menu__optionItem',\n      optionItemIndicator: 'menu__optionItemIndicator',\n      optionItemText: 'menu__optionItemText',\n      itemGroupLabel: 'menu__itemGroupLabel',\n      itemGroup: 'menu__itemGroup',\n    },\n    variants: {\n      size: {\n        xs: {\n          contextTrigger: 'menu__contextTrigger--size_xs',\n          trigger: 'menu__trigger--size_xs',\n          triggerItem: 'menu__triggerItem--size_xs',\n          indicator: 'menu__indicator--size_xs',\n          positioner: 'menu__positioner--size_xs',\n          arrow: 'menu__arrow--size_xs',\n          arrowTip: 'menu__arrowTip--size_xs',\n          content: 'menu__content--size_xs',\n          separator: 'menu__separator--size_xs',\n          item: 'menu__item--size_xs',\n          optionItem: 'menu__optionItem--size_xs',\n          optionItemIndicator: 'menu__optionItemIndicator--size_xs',\n          optionItemText: 'menu__optionItemText--size_xs',\n          itemGroupLabel: 'menu__itemGroupLabel--size_xs',\n          itemGroup: 'menu__itemGroup--size_xs',\n        },\n        sm: {\n          contextTrigger: 'menu__contextTrigger--size_sm',\n          trigger: 'menu__trigger--size_sm',\n          triggerItem: 'menu__triggerItem--size_sm',\n          indicator: 'menu__indicator--size_sm',\n          positioner: 'menu__positioner--size_sm',\n          arrow: 'menu__arrow--size_sm',\n          arrowTip: 'menu__arrowTip--size_sm',\n          content: 'menu__content--size_sm',\n          separator: 'menu__separator--size_sm',\n          item: 'menu__item--size_sm',\n          optionItem: 'menu__optionItem--size_sm',\n          optionItemIndicator: 'menu__optionItemIndicator--size_sm',\n          optionItemText: 'menu__optionItemText--size_sm',\n          itemGroupLabel: 'menu__itemGroupLabel--size_sm',\n          itemGroup: 'menu__itemGroup--size_sm',\n        },\n        md: {\n          contextTrigger: 'menu__contextTrigger--size_md',\n          trigger: 'menu__trigger--size_md',\n          triggerItem: 'menu__triggerItem--size_md',\n          indicator: 'menu__indicator--size_md',\n          positioner: 'menu__positioner--size_md',\n          arrow: 'menu__arrow--size_md',\n          arrowTip: 'menu__arrowTip--size_md',\n          content: 'menu__content--size_md',\n          separator: 'menu__separator--size_md',\n          item: 'menu__item--size_md',\n          optionItem: 'menu__optionItem--size_md',\n          optionItemIndicator: 'menu__optionItemIndicator--size_md',\n          optionItemText: 'menu__optionItemText--size_md',\n          itemGroupLabel: 'menu__itemGroupLabel--size_md',\n          itemGroup: 'menu__itemGroup--size_md',\n        },\n        lg: {\n          contextTrigger: 'menu__contextTrigger--size_lg',\n          trigger: 'menu__trigger--size_lg',\n          triggerItem: 'menu__triggerItem--size_lg',\n          indicator: 'menu__indicator--size_lg',\n          positioner: 'menu__positioner--size_lg',\n          arrow: 'menu__arrow--size_lg',\n          arrowTip: 'menu__arrowTip--size_lg',\n          content: 'menu__content--size_lg',\n          separator: 'menu__separator--size_lg',\n          item: 'menu__item--size_lg',\n          optionItem: 'menu__optionItem--size_lg',\n          optionItemIndicator: 'menu__optionItemIndicator--size_lg',\n          optionItemText: 'menu__optionItemText--size_lg',\n          itemGroupLabel: 'menu__itemGroupLabel--size_lg',\n          itemGroup: 'menu__itemGroup--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\nconst { withRootProvider, withContext } = createStyleContext(menu)\n\nexport interface RootProps extends Menu.RootProps, VariantProps<typeof menu> {}\nexport const Root = withRootProvider<RootProps>(Menu.Root)\n\nexport const Arrow = withContext<HTMLDivElement, Menu.ArrowProps>(Menu.Arrow, 'arrow')\n\nexport const ArrowTip = withContext<HTMLDivElement, Menu.ArrowTipProps>(Menu.ArrowTip, 'arrowTip')\n\nexport const CheckboxItem = withContext<HTMLDivElement, Menu.CheckboxItemProps>(\n  Menu.CheckboxItem,\n  'item',\n)\n\nexport const Content = withContext<HTMLDivElement, Menu.ContentProps>(Menu.Content, 'content')\n\nexport const ContextTrigger = withContext<HTMLButtonElement, Menu.ContextTriggerProps>(\n  Menu.ContextTrigger,\n  'contextTrigger',\n)\n\nexport const Indicator = withContext<HTMLDivElement, Menu.IndicatorProps>(\n  Menu.Indicator,\n  'indicator',\n)\n\nexport const ItemGroupLabel = withContext<HTMLDivElement, Menu.ItemGroupLabelProps>(\n  Menu.ItemGroupLabel,\n  'itemGroupLabel',\n)\n\nexport const ItemGroup = withContext<HTMLDivElement, Menu.ItemGroupProps>(\n  Menu.ItemGroup,\n  'itemGroup',\n)\n\nexport const ItemIndicator = withContext<HTMLDivElement, Menu.ItemIndicatorProps>(\n  Menu.ItemIndicator,\n  'optionItemIndicator',\n)\n\nexport const Item = withContext<HTMLDivElement, Menu.ItemProps>(Menu.Item, 'item')\n\nexport const ItemText = withContext<HTMLDivElement, Menu.ItemTextProps>(\n  Menu.ItemText,\n  'optionItemText',\n)\n\nexport const Positioner = withContext<HTMLDivElement, Menu.PositionerProps>(\n  Menu.Positioner,\n  'positioner',\n)\n\nexport const RadioItemGroup = withContext<HTMLDivElement, Menu.RadioItemGroupProps>(\n  Menu.RadioItemGroup,\n  'itemGroup',\n)\n\nexport const RadioItem = withContext<HTMLDivElement, Menu.RadioItemProps>(Menu.RadioItem, 'item')\n\nexport const Separator = withContext<HTMLHRElement, Menu.SeparatorProps>(\n  Menu.Separator,\n  'separator',\n)\n\nexport const TriggerItem = withContext<HTMLDivElement, Menu.TriggerItemProps>(\n  Menu.TriggerItem,\n  'triggerItem',\n)\n\nexport const Trigger = withContext<HTMLButtonElement, Menu.TriggerProps>(Menu.Trigger, 'trigger')\n\nexport { MenuContext as Context, type MenuContextProps as ContextProps } from '@ark-ui/react/menu'\n",
      "hasMultipleParts": true
    }
  ]
}
