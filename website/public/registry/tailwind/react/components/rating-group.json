{
  "files": [
    {
      "filename": "rating-group.tsx",
      "content": "import {\n  RatingGroup as ArkRatingGroup,\n  type RatingGroupRootProps,\n} from '@ark-ui/react/rating-group'\nimport { forwardRef } from 'react'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nexport interface RatingGroupProps extends RatingGroupRootProps, RatingGroupVariantProps {}\n\nexport const RatingGroup = forwardRef<HTMLDivElement, RatingGroupProps>((props, ref) => {\n  const { children, className, size, ...rootProps } = props\n  const { root, label, control, item } = ratingGroup({ size })\n\n  return (\n    <ArkRatingGroup.Root ref={ref} className={root({ className })} {...rootProps}>\n      {children && <ArkRatingGroup.Label className={label()}>{children}</ArkRatingGroup.Label>}\n      <ArkRatingGroup.Control className={control()}>\n        <ArkRatingGroup.Context>\n          {({ items }) =>\n            items.map((index) => (\n              <ArkRatingGroup.Item className={item()} key={index} index={index}>\n                <ArkRatingGroup.ItemContext>\n                  {(item) => <StarIcon half={item.half} />}\n                </ArkRatingGroup.ItemContext>\n              </ArkRatingGroup.Item>\n            ))\n          }\n        </ArkRatingGroup.Context>\n      </ArkRatingGroup.Control>\n    </ArkRatingGroup.Root>\n  )\n})\n\nRatingGroup.displayName = 'RatingGroup'\n\ntype RatingGroupVariantProps = VariantProps<typeof ratingGroup>\n\nconst ratingGroup = tv(\n  {\n    base: 'ratingGroup',\n    defaultVariants: { size: 'md' },\n    slots: {\n      root: 'ratingGroup__root',\n      label: 'ratingGroup__label',\n      item: 'ratingGroup__item',\n      control: 'ratingGroup__control',\n    },\n    variants: {\n      size: {\n        sm: {\n          root: 'ratingGroup__root--size_sm',\n          label: 'ratingGroup__label--size_sm',\n          item: 'ratingGroup__item--size_sm',\n          control: 'ratingGroup__control--size_sm',\n        },\n        md: {\n          root: 'ratingGroup__root--size_md',\n          label: 'ratingGroup__label--size_md',\n          item: 'ratingGroup__item--size_md',\n          control: 'ratingGroup__control--size_md',\n        },\n        lg: {\n          root: 'ratingGroup__root--size_lg',\n          label: 'ratingGroup__label--size_lg',\n          item: 'ratingGroup__item--size_lg',\n          control: 'ratingGroup__control--size_lg',\n        },\n      },\n    },\n  },\n  { twMerge: false },\n)\n\ntype IconProps = {\n  half: boolean\n}\n\nconst StarIcon = (props: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"inherit\"\n    stroke=\"inherit\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <title>Star Icon</title>\n    <defs>\n      <linearGradient id=\"half\">\n        <stop offset=\"50%\" stop-color=\"var(--colors-color-palette-default)\" />\n        <stop offset=\"50%\" stop-color=\"var(--colors-bg-emphasized)\" />\n      </linearGradient>\n    </defs>\n    <polygon\n      fill={props.half ? 'url(#half)' : 'inherit'}\n      points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
