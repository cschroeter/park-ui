{
  "files": [
    {
      "filename": "pagination.tsx",
      "content": "import { Pagination as ArkPagination, type PaginationRootProps } from '@ark-ui/react/pagination'\nimport { forwardRef } from 'react'\nimport { type VariantProps, tv } from 'tailwind-variants'\nimport { Button } from '~/components/ui/button'\nimport { IconButton } from '~/components/ui/icon-button'\n\nexport interface PaginationProps extends PaginationRootProps, PaginationVariantProps {}\n\nexport const Pagination = forwardRef<HTMLElement, PaginationProps>((props, ref) => {\n  const { className, ...rootProps } = props\n  const { root, ellipsis, item, prevTrigger, nextTrigger } = pagination()\n\n  return (\n    <ArkPagination.Root ref={ref} className={root({ className })} {...rootProps}>\n      <ArkPagination.PrevTrigger className={prevTrigger()} asChild>\n        <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n          <ChevronLeftIcon />\n        </IconButton>\n      </ArkPagination.PrevTrigger>\n      <ArkPagination.Context>\n        {(pagination) =>\n          pagination.pages.map((page, index) =>\n            page.type === 'page' ? (\n              <ArkPagination.Item className={item()} key={index} {...page} asChild>\n                <Button variant=\"outline\">{page.value}</Button>\n              </ArkPagination.Item>\n            ) : (\n              <ArkPagination.Ellipsis className={ellipsis()} key={index} index={index}>\n                &#8230;\n              </ArkPagination.Ellipsis>\n            ),\n          )\n        }\n      </ArkPagination.Context>\n      <ArkPagination.NextTrigger className={nextTrigger()} asChild>\n        <IconButton variant=\"ghost\" aria-label=\"Next Page\">\n          <ChevronRightIcon />\n        </IconButton>\n      </ArkPagination.NextTrigger>\n    </ArkPagination.Root>\n  )\n})\n\nPagination.displayName = 'Pagination'\n\ntype PaginationVariantProps = VariantProps<typeof pagination>\n\nconst pagination = tv(\n  {\n    base: 'pagination',\n    slots: {\n      root: 'pagination__root',\n      item: 'pagination__item',\n      ellipsis: 'pagination__ellipsis',\n      prevTrigger: 'pagination__prevTrigger',\n      nextTrigger: 'pagination__nextTrigger',\n    },\n    variants: {},\n  },\n  { twMerge: false },\n)\n\nconst ChevronLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Left</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"m15 18l-6-6l6-6\"\n    />\n  </svg>\n)\n\nconst ChevronRightIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>Chevron Right</title>\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"m9 18l6-6l-6-6\"\n    />\n  </svg>\n)\n",
      "hasMultipleParts": false
    }
  ]
}
