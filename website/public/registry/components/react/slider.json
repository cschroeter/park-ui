{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "slider",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "slider.tsx",
      "content": "'use client'\nimport { Slider, useSliderContext } from '@ark-ui/react/slider'\nimport { type ComponentProps, forwardRef } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { slider } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(slider)\n\nexport const Root = withProvider(Slider.Root, 'root')\nexport const Control = withContext(Slider.Control, 'control')\nexport const DraggingIndicator = withContext(Slider.DraggingIndicator, 'draggingIndicator')\nexport const Label = withContext(Slider.Label, 'label')\nexport const Marker = withContext(Slider.Marker, 'marker')\nexport const MarkerIndicator = withContext('div', 'markerIndicator')\nexport const MarkerGroup = withContext(Slider.MarkerGroup, 'markerGroup')\nexport const Range = withContext(Slider.Range, 'range')\nexport const Thumb = withContext(Slider.Thumb, 'thumb')\nexport const Track = withContext(Slider.Track, 'track')\nexport const ValueText = withContext(Slider.ValueText, 'valueText')\nexport const HiddenInput = Slider.HiddenInput\nexport const Context = Slider.Context\n\nexport type RootProps = ComponentProps<typeof Root>\nexport type MarkerGroupProps = ComponentProps<typeof MarkerGroup>\nexport type ThumbProps = ComponentProps<typeof Thumb>\n\nexport interface MarksProps extends MarkerGroupProps {\n  marks?: Array<number | { value: number; label: React.ReactNode }> | undefined\n}\n\nexport const Marks = forwardRef<HTMLDivElement, MarksProps>(function Marks(props, ref) {\n  const { marks, ...rest } = props\n  if (!marks?.length) return null\n\n  return (\n    <MarkerGroup ref={ref} {...rest}>\n      {marks.map((mark, index) => {\n        const value = typeof mark === 'number' ? mark : mark.value\n        const label = typeof mark === 'number' ? undefined : mark.label\n        return (\n          <Marker key={index} value={value}>\n            <MarkerIndicator />\n            {label != null && <span className=\"chakra-slider__marker-label\">{label}</span>}\n          </Marker>\n        )\n      })}\n    </MarkerGroup>\n  )\n})\n\nexport const Thumbs = (props: Omit<ThumbProps, 'index'>) => {\n  const slider = useSliderContext()\n  return slider.value.map((_, index) => (\n    <Thumb key={index} index={index} {...props}>\n      <HiddenInput />\n    </Thumb>\n  ))\n}\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "Slider",
            "moduleSpecifier": "./slider"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "slider.ts",
      "content": "import { defineSlotRecipe } from '@pandacss/dev'\n\nexport const slider = defineSlotRecipe({\n  className: 'slider',\n  slots: [\n    'control',\n    'draggingIndicator',\n    'label',\n    'marker',\n    'markerIndicator',\n    'markerGroup',\n    'range',\n    'root',\n    'thumb',\n    'track',\n    'valueText',\n  ],\n  base: {\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1',\n      width: 'full',\n    },\n    control: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    track: {\n      backgroundColor: 'bg.emphasized',\n      borderRadius: 'full',\n      overflow: 'hidden',\n      flex: '1',\n    },\n    range: {\n      background: 'colorPalette.default',\n    },\n    thumb: {\n      background: 'bg.default',\n      borderColor: 'colorPalette.default',\n      borderRadius: 'full',\n      borderWidth: '2px',\n      boxShadow: 'sm',\n      outline: 'none',\n      zIndex: '1',\n    },\n    label: {\n      color: 'fg.default',\n      fontWeight: 'medium',\n    },\n    markerGroup: {\n      mt: '-1',\n    },\n    marker: {\n      '--before-background': {\n        _light: 'white',\n        _dark: 'colors.colorPalette.fg',\n      },\n      color: 'fg.muted',\n      _before: {\n        background: 'white',\n        borderRadius: 'full',\n        content: \"''\",\n        display: 'block',\n        left: '50%',\n        position: 'relative',\n        transform: 'translateX(-50%)',\n      },\n      _underValue: {\n        _before: {\n          background: 'var(--before-background)',\n        },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n  variants: {\n    size: {\n      sm: {\n        control: {\n          height: '4',\n        },\n        range: {\n          height: '1.5',\n        },\n        track: {\n          height: '1.5',\n        },\n        thumb: {\n          height: '4',\n          width: '4',\n        },\n        marker: {\n          _before: {\n            height: '1',\n            top: '-2.5',\n            width: '1',\n          },\n          textStyle: 'sm',\n        },\n        label: {\n          textStyle: 'sm',\n        },\n      },\n      md: {\n        control: {\n          height: '5',\n        },\n        range: {\n          height: '2',\n        },\n        track: {\n          height: '2',\n        },\n        thumb: {\n          height: '5',\n          width: '5',\n        },\n        marker: {\n          _before: {\n            height: '1',\n            top: '-3',\n            width: '1',\n          },\n          textStyle: 'sm',\n        },\n        label: {\n          textStyle: 'sm',\n        },\n      },\n      lg: {\n        control: {\n          height: '6',\n        },\n        range: {\n          height: '2.5',\n        },\n        track: {\n          height: '2.5',\n        },\n        thumb: {\n          height: '6',\n          width: '6',\n        },\n        marker: {\n          _before: {\n            height: '1.5',\n            top: '-15px',\n            width: '1.5',\n          },\n          textStyle: 'md',\n        },\n        label: {\n          textStyle: 'md',\n        },\n      },\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./slider",
            "symbols": [
              {
                "name": "slider"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "slider"
              }
            ]
          }
        ]
      }
    }
  ]
}