{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "avatar",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "avatar.tsx",
      "content": "'use client'\nimport { Avatar } from '@ark-ui/react/avatar'\nimport { type ComponentProps, forwardRef } from 'react'\nimport { createStyleContext, styled } from 'styled-system/jsx'\nimport { avatar } from 'styled-system/recipes'\nimport type { JsxStyleProps } from 'styled-system/types'\n\nconst { withProvider, withContext } = createStyleContext(avatar)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(Avatar.Root, 'root')\nexport const RootProvider = withProvider(Avatar.RootProvider, 'root')\nexport const Image = withContext(Avatar.Image, 'image', {\n  defaultProps: {\n    draggable: 'false',\n    referrerPolicy: 'no-referrer',\n  },\n})\n\nexport { AvatarContext as Context } from '@ark-ui/react/avatar'\n\nexport const Icon = forwardRef<SVGSVGElement, JsxStyleProps>(function Icon(props, ref) {\n  return (\n    <styled.svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      strokeWidth=\"0\"\n      viewBox=\"0 0 24 24\"\n      height=\"1.2em\"\n      width=\"1.2em\"\n      ref={ref}\n      {...props}\n    >\n      <title>User Avatar</title>\n      <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n      <circle cx=\"12\" cy=\"7\" r=\"4\" />\n    </styled.svg>\n  )\n})\n\nexport interface FallbackProps extends ComponentProps<typeof StyledFallback> {\n  /**\n   * The name to derive the initials from.\n   * If not provided, the fallback will display a generic icon.\n   */\n  name?: string | undefined\n}\n\nconst StyledFallback = withContext(Avatar.Fallback, 'fallback')\n\nexport const Fallback = forwardRef<HTMLDivElement, FallbackProps>(function Fallback(props, ref) {\n  const { name, children, asChild, ...rest } = props\n\n  const fallbackContent = children || asChild ? children : name ? getInitials(name) : <Icon />\n\n  return (\n    <StyledFallback ref={ref} {...rest}>\n      {fallbackContent}\n    </StyledFallback>\n  )\n})\n\nconst getInitials = (name: string) => {\n  const names = name.trim().split(' ')\n  const firstName = names[0] || ''\n  const lastName = names.length > 1 ? names[names.length - 1] : ''\n  return firstName && lastName ? `${firstName[0]}${lastName[0]}` : firstName[0]\n}\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "Avatar",
            "moduleSpecifier": "./avatar"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "avatar.ts",
      "content": "import { avatarAnatomy } from '@ark-ui/react/avatar'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const avatar = defineSlotRecipe({\n  className: 'avatar',\n  slots: avatarAnatomy.keys(),\n  base: {\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontWeight: 'medium',\n      position: 'relative',\n      verticalAlign: 'top',\n      flexShrink: '0',\n      userSelect: 'none',\n      width: 'var(--avatar-size)',\n      height: 'var(--avatar-size)',\n      fontSize: 'var(--avatar-font-size)',\n      borderRadius: 'var(--avatar-radius)',\n      '&[data-group-item]': {\n        borderWidth: '0.125em',\n        borderColor: 'bg.default',\n      },\n    },\n    fallback: {\n      lineHeight: '1',\n      textTransform: 'uppercase',\n      fontWeight: 'medium',\n      fontSize: 'var(--avatar-font-size)',\n      borderRadius: 'var(--avatar-radius)',\n    },\n    image: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n      borderRadius: 'var(--avatar-radius)',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n    shape: 'full',\n    variant: 'subtle',\n  },\n  variants: {\n    size: {\n      full: {\n        root: {\n          '--avatar-size': '100%',\n          '--avatar-font-size': '100%',\n        },\n      },\n      '2xs': {\n        root: {\n          '--avatar-font-size': 'fontSizes.2xs',\n          '--avatar-size': 'sizes.6',\n        },\n      },\n      xs: {\n        root: {\n          '--avatar-font-size': 'fontSizes.xs',\n          '--avatar-size': 'sizes.8',\n        },\n      },\n      sm: {\n        root: {\n          '--avatar-font-size': 'fontSizes.sm',\n          '--avatar-size': 'sizes.9',\n        },\n      },\n      md: {\n        root: {\n          '--avatar-font-size': 'fontSizes.md',\n          '--avatar-size': 'sizes.10',\n        },\n      },\n      lg: {\n        root: {\n          '--avatar-font-size': 'fontSizes.md',\n          '--avatar-size': 'sizes.11',\n        },\n      },\n      xl: {\n        root: {\n          '--avatar-font-size': 'fontSizes.lg',\n          '--avatar-size': 'sizes.12',\n        },\n      },\n      '2xl': {\n        root: {\n          '--avatar-font-size': 'fontSizes.xl',\n          '--avatar-size': 'sizes.16',\n        },\n      },\n    },\n    variant: {\n      solid: {\n        root: {\n          layerStyle: 'solid',\n        },\n      },\n      surface: {\n        root: {\n          layerStyle: 'surface',\n        },\n      },\n      subtle: {\n        root: {\n          layerStyle: 'subtle',\n        },\n      },\n      outline: {\n        root: {\n          layerStyle: 'outline',\n        },\n      },\n    },\n    borderless: {\n      true: {\n        root: {\n          '&[data-group-item]': {\n            borderWidth: '0px',\n          },\n        },\n      },\n    },\n    shape: {\n      square: {},\n      rounded: {\n        root: { '--avatar-radius': 'radii.l3' },\n      },\n      full: {\n        root: { '--avatar-radius': 'radii.full' },\n      },\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./avatar",
            "symbols": [
              {
                "name": "avatar"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "avatar"
              }
            ]
          }
        ]
      }
    }
  ]
}