{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "pin-input",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "pin-input.tsx",
      "content": "'use client'\nimport { PinInput } from '@ark-ui/react/pin-input'\nimport type { ComponentProps } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { pinInput } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(pinInput)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(PinInput.Root, 'root', {\n  forwardProps: ['mask'],\n})\nexport const RootProvider = withProvider(PinInput.RootProvider, 'root')\nexport const Control = withContext(PinInput.Control, 'control')\nexport const HiddenInput = PinInput.HiddenInput\nexport const Input = withContext(PinInput.Input, 'input')\nexport const Label = withContext(PinInput.Label, 'label')\n\nexport { PinInputContext as Context } from '@ark-ui/react/pin-input'\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "PinInput",
            "moduleSpecifier": "./pin-input"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "pin-input.ts",
      "content": "import { pinInputAnatomy } from '@ark-ui/react/pin-input'\nimport { defineSlotRecipe } from '@pandacss/dev'\nimport { input } from './input'\n\nexport const pinInput = defineSlotRecipe({\n  className: 'pin-input',\n  slots: pinInputAnatomy.keys(),\n  base: {\n    input: {\n      ...input.base,\n      textAlign: 'center',\n      width: 'var(--input-height)',\n      px: '1!',\n    },\n    control: {\n      display: 'inline-flex',\n      gap: '2',\n      isolation: 'isolate',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n    variant: 'outline',\n  },\n\n  variants: {\n    size: {\n      xs: {\n        input: input.variants?.size?.xs,\n      },\n      sm: {\n        input: input.variants?.size?.sm,\n      },\n      md: {\n        input: input.variants?.size?.md,\n      },\n      lg: {\n        input: input.variants?.size?.lg,\n      },\n      xl: {\n        input: input.variants?.size?.xl,\n      },\n      '2xl': {\n        input: input.variants?.size?.['2xl'],\n      },\n    },\n    variant: {\n      outline: { input: input.variants?.variant?.outline },\n      subtle: { input: input.variants?.variant?.subtle },\n      flushed: { input: input.variants?.variant?.flushed },\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./pin-input",
            "symbols": [
              {
                "name": "pin-input"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "pin-input"
              }
            ]
          }
        ]
      }
    }
  ]
}