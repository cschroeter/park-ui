{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "color-picker",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "color-picker.tsx",
      "content": "'use client'\nimport { ColorPicker } from '@ark-ui/react/color-picker'\nimport type { ComponentProps } from 'react'\nimport { createStyleContext } from 'styled-system/jsx'\nimport { colorPicker } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(colorPicker)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(ColorPicker.Root, 'root')\nexport const Area = withContext(ColorPicker.Area, 'area')\nexport const AreaBackground = withContext(ColorPicker.AreaBackground, 'areaBackground')\nexport const AreaThumb = withContext(ColorPicker.AreaThumb, 'areaThumb')\nexport const ChannelInput = withContext(ColorPicker.ChannelInput, 'channelInput')\nexport const ChannelSlider = withContext(ColorPicker.ChannelSlider, 'channelSlider')\nexport const ChannelSliderLabel = withContext(ColorPicker.ChannelSliderLabel, 'channelSliderLabel')\nexport const ChannelSliderThumb = withContext(ColorPicker.ChannelSliderThumb, 'channelSliderThumb')\nexport const ChannelSliderTrack = withContext(ColorPicker.ChannelSliderTrack, 'channelSliderTrack')\nexport const ChannelSliderValueText = withContext(\n  ColorPicker.ChannelSliderValueText,\n  'channelSliderValueText',\n)\nexport const Content = withContext(ColorPicker.Content, 'content')\nexport const Control = withContext(ColorPicker.Control, 'control')\nexport const EyeDropperTrigger = withContext(ColorPicker.EyeDropperTrigger, 'eyeDropperTrigger')\nexport const FormatSelect = withContext(ColorPicker.FormatSelect, 'formatSelect')\nexport const FormatTrigger = withContext(ColorPicker.FormatTrigger, 'formatTrigger')\nexport const HiddenInput = ColorPicker.HiddenInput\nexport const Label = withContext(ColorPicker.Label, 'label')\nexport const Positioner = withContext(ColorPicker.Positioner, 'positioner')\nexport const Swatch = withContext(ColorPicker.Swatch, 'swatch')\nexport const SwatchGroup = withContext(ColorPicker.SwatchGroup, 'swatchGroup')\nexport const SwatchIndicator = withContext(ColorPicker.SwatchIndicator, 'swatchIndicator')\nexport const SwatchTrigger = withContext(ColorPicker.SwatchTrigger, 'swatchTrigger')\nexport const TransparencyGrid = withContext(ColorPicker.TransparencyGrid, 'transparencyGrid')\nexport const Trigger = withContext(ColorPicker.Trigger, 'trigger')\nexport const ValueSwatch = ColorPicker.ValueSwatch\nexport const ValueText = withContext(ColorPicker.ValueText, 'valueText')\nexport const View = withContext(ColorPicker.View, 'view')\n\nexport { ColorPickerContext as Context } from '@ark-ui/react/color-picker'\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "ColorPicker",
            "moduleSpecifier": "./color-picker"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "color-picker.ts",
      "content": "import { colorPickerAnatomy } from '@ark-ui/react/color-picker'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const colorPicker = defineSlotRecipe({\n  className: 'color-picker',\n  slots: colorPickerAnatomy.keys(),\n  base: {\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1.5',\n    },\n    label: {\n      color: 'fg.default',\n      fontWeight: 'medium',\n      textStyle: 'sm',\n    },\n    control: {\n      display: 'flex',\n      flexDirection: 'row',\n      gap: '2',\n    },\n    content: {\n      background: 'bg.default',\n      borderRadius: 'l3',\n      boxShadow: 'lg',\n      display: 'flex',\n      flexDirection: 'column',\n      maxWidth: 'sm',\n      p: '4',\n      zIndex: 'dropdown',\n      _open: {\n        animation: 'fadeIn 0.25s ease-out',\n      },\n      _closed: {\n        animation: 'fadeOut 0.2s ease-out',\n      },\n      _hidden: {\n        display: 'none',\n      },\n    },\n    area: {\n      height: '36',\n      borderRadius: 'l2',\n      overflow: 'hidden',\n    },\n    areaThumb: {\n      borderRadius: 'full',\n      height: '2.5',\n      width: '2.5',\n      boxShadow: 'white 0px 0px 0px 2px, black 0px 0px 2px 1px',\n      outline: 'none',\n    },\n    areaBackground: {\n      height: 'full',\n    },\n    channelSlider: {\n      borderRadius: 'l2',\n    },\n    channelSliderTrack: {\n      height: '3',\n      borderRadius: 'l2',\n    },\n    swatchGroup: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(7, 1fr)',\n      gap: '2',\n      background: 'bg.default',\n    },\n    swatch: {\n      height: '6',\n      width: '6',\n      borderRadius: 'l2',\n      boxShadow:\n        '0 0 0 1px var(--colors-border-emphasized), 0 0 0 2px var(--colors-bg-default) inset',\n    },\n    channelSliderThumb: {\n      borderRadius: 'full',\n      height: '2.5',\n      width: '2.5',\n      boxShadow: 'white 0px 0px 0px 2px, black 0px 0px 2px 1px',\n      transform: 'translate(-50%, -50%)',\n      outline: 'none',\n    },\n    transparencyGrid: {\n      borderRadius: 'l2',\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./color-picker",
            "symbols": [
              {
                "name": "color-picker"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "color-picker"
              }
            ]
          }
        ]
      }
    }
  ]
}