{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "rating-group",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "rating-group.tsx",
      "content": "'use client'\nimport {\n  RatingGroup,\n  useRatingGroupContext,\n  useRatingGroupItemContext,\n} from '@ark-ui/react/rating-group'\nimport { StarIcon } from 'lucide-react'\nimport {\n  type ComponentProps,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  type ReactElement,\n} from 'react'\nimport { createStyleContext, type HTMLStyledProps } from 'styled-system/jsx'\nimport { ratingGroup } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(ratingGroup)\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider(RatingGroup.Root, 'root')\nexport const RootProvider = withProvider(RatingGroup.RootProvider, 'root')\nexport const Item = withContext(RatingGroup.Item, 'item')\nexport const Label = withContext(RatingGroup.Label, 'label')\n\nexport const HiddenInput = RatingGroup.HiddenInput\n\nexport {\n  RatingGroupContext as Context,\n  RatingGroupItemContext as ItemContext,\n} from '@ark-ui/react/rating-group'\n\ninterface ItemIndicatorProps extends HTMLStyledProps<'span'> {\n  icon?: ReactElement | undefined\n}\n\nconst StyledItemIndicator = withContext('span', 'itemIndicator')\n\nconst cloneIcon = (icon: ReactElement, type: string) => {\n  if (!isValidElement(icon)) return null\n  const props = { [`data-${type}`]: '', 'aria-hidden': true, fill: 'currentColor' }\n  return cloneElement(icon, props)\n}\n\nexport const ItemIndicator = forwardRef<HTMLSpanElement, ItemIndicatorProps>(\n  function ItemIndicator(props, ref) {\n    const { icon = <StarIcon />, ...rest } = props\n    const item = useRatingGroupItemContext()\n\n    return (\n      <StyledItemIndicator\n        ref={ref}\n        {...rest}\n        data-highlighted={item.highlighted ? '' : undefined}\n        data-checked={item.checked ? '' : undefined}\n        data-half={item.half ? '' : undefined}\n      >\n        {cloneIcon(icon, 'bg')}\n        {cloneIcon(icon, 'fg')}\n      </StyledItemIndicator>\n    )\n  },\n)\n\ninterface ItemsProps extends Omit<ComponentProps<typeof Item>, 'index'> {\n  icon?: ReactElement | undefined\n}\n\nexport const Items = (props: ItemsProps) => {\n  const { icon, ...rest } = props\n  const ratingGroup = useRatingGroupContext()\n  return ratingGroup.items.map((item) => (\n    <Item key={item} index={item} {...rest}>\n      <ItemIndicator icon={icon} />\n    </Item>\n  ))\n}\n\nexport const Control = withContext(RatingGroup.Control, 'control', {\n  defaultProps: { children: <Items /> },\n})\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "RatingGroup",
            "moduleSpecifier": "./rating-group"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "rating-group.ts",
      "content": "import { ratingGroupAnatomy } from '@ark-ui/react/rating-group/'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const ratingGroup = defineSlotRecipe({\n  className: 'rating-group',\n  slots: ratingGroupAnatomy.extendWith('itemIndicator').keys(),\n  base: {\n    root: {\n      alignItems: 'center',\n      display: 'inline-flex',\n      verticalAlign: 'top',\n    },\n    control: {\n      alignItems: 'center',\n      display: 'inline-flex',\n      gap: '0.5',\n    },\n    item: {\n      alignItems: 'center',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      userSelect: 'none',\n    },\n    label: {\n      fontWeight: 'medium',\n      userSelect: 'none',\n    },\n    itemIndicator: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n      '--clip-path': { base: 'inset(0 50% 0 0)', _rtl: 'inset(0 0 0 50%)' },\n      _icon: {\n        stroke: 'currentColor',\n        display: 'inline-block',\n        flexShrink: 0,\n        position: 'absolute',\n        width: 'inherit',\n        height: 'inherit',\n        left: 0,\n        top: 0,\n      },\n      '& [data-bg]': {\n        color: 'bg.muted',\n      },\n      '& [data-fg]': {\n        color: 'transparent',\n      },\n      '&[data-highlighted]:not([data-half])': {\n        '& [data-fg]': {\n          color: 'colorPalette.solid.bg',\n        },\n      },\n      '&[data-half]': {\n        '& [data-fg]': {\n          color: 'colorPalette.solid.bg',\n          clipPath: 'var(--clip-path)',\n        },\n      },\n    },\n  },\n\n  variants: {\n    size: {\n      xs: { root: { gap: '2' }, itemIndicator: { width: '4', height: '4' } },\n      sm: { root: { gap: '2' }, itemIndicator: { width: '4.5', height: '4.5' } },\n      md: { root: { gap: '3' }, itemIndicator: { width: '5', height: '5' } },\n      lg: { root: { gap: '3' }, itemIndicator: { width: '5.5', height: '5.5' } },\n      xl: { root: { gap: '3' }, itemIndicator: { width: '6', height: '6' } },\n    },\n  },\n\n  defaultVariants: {\n    size: 'md',\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./rating-group",
            "symbols": [
              {
                "name": "rating-group"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "rating-group"
              }
            ]
          }
        ]
      }
    }
  ]
}