{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "group",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "group.tsx",
      "content": "import { ark } from '@ark-ui/react'\nimport {\n  Children,\n  type ComponentProps,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  memo,\n  useMemo,\n} from 'react'\nimport { styled } from 'styled-system/jsx'\nimport { group } from 'styled-system/recipes'\n\ntype StyledGroupProps = ComponentProps<typeof StyledGroup>\nconst StyledGroup = styled(ark.div, group)\n\nexport interface GroupProps extends StyledGroupProps {\n  /**\n   * The `alignItems` style property\n   */\n  align?: StyledGroupProps['alignItems'] | undefined\n  /**\n   * The `justifyContent` style property\n   */\n  justify?: StyledGroupProps['justifyContent'] | undefined\n  /**\n   * The `flexWrap` style property\n   */\n  wrap?: StyledGroupProps['flexWrap'] | undefined\n  /**\n   * A function that determines if a child should be skipped\n   */\n  skip?: (child: React.ReactElement) => boolean | undefined\n}\n\nexport const Group = memo(\n  forwardRef<HTMLDivElement, GroupProps>(function Group(props, ref) {\n    const { align = 'center', justify = 'flex-start', children, wrap, skip, ...rest } = props\n\n    const _children = useMemo(() => {\n      const childArray = Children.toArray(children).filter(isValidElement)\n      if (childArray.length === 1) return childArray\n\n      const validChildArray = childArray.filter((child) => !skip?.(child))\n      const validChildCount = validChildArray.length\n      if (validChildArray.length === 1) return childArray\n\n      return childArray.map((child) => {\n        const childProps = child.props as any\n        if (skip?.(child)) return child\n        const index = validChildArray.indexOf(child)\n        return cloneElement(child, {\n          ...childProps,\n          'data-group-item': '',\n          'data-first': dataAttr(index === 0),\n          'data-last': dataAttr(index === validChildCount - 1),\n          'data-between': dataAttr(index > 0 && index < validChildCount - 1),\n          style: {\n            '--group-count': validChildCount,\n            '--group-index': index,\n            ...(childProps?.style ?? {}),\n          },\n        } as any)\n      })\n    }, [children, skip])\n\n    return (\n      <StyledGroup ref={ref} alignItems={align} justifyContent={justify} flexWrap={wrap} {...rest}>\n        {_children}\n      </StyledGroup>\n    )\n  }),\n)\n\ntype Booleanish = boolean | 'true' | 'false'\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? '' : undefined) as Booleanish\n",
      "indexFile": {
        "exports": [
          {
            "type": "named",
            "symbols": [
              {
                "name": "Group",
                "isType": false
              },
              {
                "name": "GroupProps",
                "isType": true
              }
            ],
            "moduleSpecifier": "./group"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "group.ts",
      "content": "import { defineRecipe } from '@pandacss/dev'\n\nexport const group = defineRecipe({\n  className: 'group',\n  base: {\n    display: 'inline-flex',\n    gap: 'var(--group-gap, 0.5rem)',\n    isolation: 'isolate',\n    position: 'relative',\n    '& [data-group-item]': {\n      _focusVisible: {\n        zIndex: 1,\n      },\n    },\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        flexDirection: 'row',\n      },\n      vertical: {\n        flexDirection: 'column',\n      },\n    },\n    attached: {\n      true: {\n        gap: '0!',\n      },\n    },\n    grow: {\n      true: {\n        display: 'flex',\n        '& > *': {\n          flex: 1,\n        },\n      },\n    },\n    stacking: {\n      'first-on-top': {\n        '& > [data-group-item]': {\n          zIndex: 'calc(var(--group-count) - var(--group-index))',\n        },\n      },\n      'last-on-top': {\n        '& > [data-group-item]': {\n          zIndex: 'var(--group-index)',\n        },\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      orientation: 'horizontal',\n      attached: true,\n      css: {\n        '& > *[data-first]': {\n          borderEndRadius: '0!',\n          marginEnd: '-1px',\n        },\n        '& > *[data-between]': {\n          borderRadius: '0!',\n          marginEnd: '-1px',\n        },\n        '& > *[data-last]': {\n          borderStartRadius: '0!',\n        },\n      },\n    },\n    {\n      orientation: 'vertical',\n      attached: true,\n      css: {\n        '& > *[data-first]': {\n          borderBottomRadius: '0!',\n          marginBottom: '-1px',\n        },\n        '& > *[data-between]': {\n          borderRadius: '0!',\n          marginBottom: '-1px',\n        },\n        '& > *[data-last]': {\n          borderTopRadius: '0!',\n        },\n      },\n    },\n  ],\n  defaultVariants: {\n    orientation: 'horizontal',\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./group",
            "symbols": [
              {
                "name": "group"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "recipes",
            "properties": [
              {
                "name": "group"
              }
            ]
          }
        ]
      }
    }
  ]
}