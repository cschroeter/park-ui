{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "input-group",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "input-group.tsx",
      "content": "'use client'\n\nimport { Children, cloneElement, forwardRef, type ReactElement, type ReactNode } from 'react'\nimport { css, cx } from 'styled-system/css'\nimport type { BoxProps } from 'styled-system/jsx'\nimport { Group } from './group'\nimport { InputAddon, type InputAddonProps } from './input-addon'\nimport { InputElement, type InputElementProps } from './input-element'\n\nexport interface InputGroupProps extends BoxProps {\n  /**\n   * The props to pass to the start element\n   */\n  startElementProps?: InputElementProps | undefined\n  /**\n   * The props to pass to the end element\n   */\n  endElementProps?: InputElementProps | undefined\n  /**\n   * The start element to render the inner left of the group\n   */\n  startElement?: ReactNode | undefined\n  /**\n   * The end element to render the inner right of the group\n   */\n  endElement?: ReactNode | undefined\n  /**\n   * The start addon to render the left of the group\n   */\n  startAddon?: ReactNode | undefined\n  /**\n   * The props to pass to the start addon\n   */\n  startAddonProps?: InputAddonProps | undefined\n  /**\n   * The end addon to render the right of the group\n   */\n  endAddon?: ReactNode | undefined\n  /**\n   * The props to pass to the end addon\n   */\n  endAddonProps?: InputAddonProps | undefined\n  /**\n   * The children to render inside the group\n   */\n  children: ReactElement<InputElementProps>\n  /**\n   * The offset to apply to the start element\n   */\n  startOffset?: InputElementProps['paddingStart'] | undefined\n  /**\n   * The offset to apply to the end element\n   */\n  endOffset?: InputElementProps['paddingEnd'] | undefined\n}\n\nexport const InputGroup = forwardRef<HTMLDivElement, InputGroupProps>(\n  function InputGroup(props, ref) {\n    const {\n      startElement,\n      startElementProps,\n      endElement,\n      endElementProps,\n      startAddon,\n      startAddonProps,\n      endAddon,\n      endAddonProps,\n      children,\n      startOffset = '0px',\n      endOffset = '0px',\n      ...rest\n    } = props\n\n    const child = Children.only<ReactElement<InputElementProps>>(children)\n    const attached = Boolean(startAddon || endAddon)\n\n    const inputStyles = css({\n      ...(startElement && {\n        ps: `calc(var(--input-height) - ${startOffset})`,\n      }),\n      ...(endElement && { pe: `calc(var(--input-height) - ${endOffset})` }),\n    })\n\n    return (\n      <Group\n        width=\"full\"\n        ref={ref}\n        attached={attached}\n        skip={(el) => el.type === InputElement}\n        _icon={{\n          boxSize: '5',\n        }}\n        {...rest}\n      >\n        {startAddon && <InputAddon {...startAddonProps}>{startAddon}</InputAddon>}\n        {startElement && (\n          <InputElement pointerEvents=\"none\" {...startElementProps}>\n            {startElement}\n          </InputElement>\n        )}\n        {cloneElement(child, {\n          ...children.props,\n          className: cx(child.props.className, inputStyles),\n        })}\n        {endElement && (\n          <InputElement placement=\"end\" {...endElementProps}>\n            {endElement}\n          </InputElement>\n        )}\n        {endAddon && <InputAddon {...endAddonProps}>{endAddon}</InputAddon>}\n      </Group>\n    )\n  },\n)\n",
      "indexFile": {
        "exports": [
          {
            "type": "named",
            "symbols": [
              {
                "name": "InputGroup",
                "isType": false
              },
              {
                "name": "InputGroupProps",
                "isType": true
              }
            ],
            "moduleSpecifier": "./input-group"
          }
        ]
      }
    }
  ]
}