{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "combobox",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "combobox.tsx",
      "content": "'use client'\nimport { Combobox } from '@ark-ui/react/combobox'\nimport { ark } from '@ark-ui/react/factory'\nimport { CheckIcon, ChevronsUpDownIcon, XIcon } from 'lucide-react'\nimport { createStyleContext, type HTMLStyledProps } from 'styled-system/jsx'\nimport { type ComboboxVariantProps, combobox } from 'styled-system/recipes'\n\nconst { withProvider, withContext } = createStyleContext(combobox)\n\nexport type RootProps = HTMLStyledProps<'div'> & ComboboxVariantProps\n\nexport const Root = withProvider(Combobox.Root, 'root', {\n  defaultProps: { positioning: { sameWidth: true } },\n}) as Combobox.RootComponent<RootProps>\n\nexport const RootProvider = withProvider(\n  Combobox.RootProvider,\n  'root',\n) as Combobox.RootProviderComponent<RootProps>\n\nexport const ClearTrigger = withContext(Combobox.ClearTrigger, 'clearTrigger', {\n  defaultProps: { children: <XIcon /> },\n})\nexport const Content = withContext(Combobox.Content, 'content')\nexport const Control = withContext(Combobox.Control, 'control')\nexport const Empty = withContext(Combobox.Empty, 'empty')\nexport const IndicatorGroup = withContext(ark.div, 'indicatorGroup')\nexport const Input = withContext(Combobox.Input, 'input')\nexport const Item = withContext(Combobox.Item, 'item')\nexport const ItemGroup = withContext(Combobox.ItemGroup, 'itemGroup')\nexport const ItemGroupLabel = withContext(Combobox.ItemGroupLabel, 'itemGroupLabel')\nexport const ItemIndicator = withContext(Combobox.ItemIndicator, 'itemIndicator', {\n  defaultProps: { children: <CheckIcon /> },\n})\nexport const ItemText = withContext(Combobox.ItemText, 'itemText')\nexport const Label = withContext(Combobox.Label, 'label')\nexport const List = withContext(Combobox.List, 'list')\nexport const Positioner = withContext(Combobox.Positioner, 'positioner')\nexport const Trigger = withContext(Combobox.Trigger, 'trigger', {\n  defaultProps: { children: <ChevronsUpDownIcon /> },\n})\n\nexport { ComboboxContext as Context } from '@ark-ui/react/combobox'\n",
      "indexFile": {
        "exports": [
          {
            "type": "namespace",
            "namespace": "Combobox",
            "moduleSpecifier": "./combobox"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "combobox.ts",
      "content": "import { comboboxAnatomy } from '@ark-ui/react/combobox'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const combobox = defineSlotRecipe({\n  className: 'combobox',\n  slots: comboboxAnatomy.extendWith('indicatorGroup').keys(),\n  base: {\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1.5',\n      width: 'full',\n    },\n    label: {\n      textStyle: 'sm',\n      fontWeight: 'medium',\n    },\n    input: {\n      appearance: 'none',\n      borderRadius: 'l2',\n      height: 'var(--combobox-input-height)',\n      minHeight: 'var(--combobox-input-height)',\n      minW: 'var(--combobox-input-height)',\n      minWidth: '0',\n      outline: '0',\n      position: 'relative',\n      textAlign: 'start',\n      transition: 'colors',\n      transitionProperty: 'box-shadow, border-color',\n      width: '100%',\n      _disabled: {\n        layerStyle: 'disabled',\n      },\n    },\n    control: {\n      position: 'relative',\n    },\n    content: {\n      background: 'gray.surface.bg',\n      borderRadius: 'l2',\n      boxShadow: 'md',\n      display: 'flex',\n      flexDirection: 'column',\n      maxH: 'min(var(--available-height), {sizes.96})',\n      outline: 0,\n      overflowY: 'auto',\n      zIndex: 'dropdown',\n      _open: {\n        animationStyle: 'slide-fade-in',\n        animationDuration: 'slow',\n      },\n      _closed: {\n        animationStyle: 'slide-fade-out',\n        animationDuration: 'fastest',\n      },\n      '&[data-empty]:not(:has([data-scope=combobox][data-part=empty]))': {\n        opacity: 0,\n      },\n    },\n    item: {\n      alignItems: 'center',\n      borderRadius: 'l1',\n      cursor: 'default',\n      display: 'flex',\n      justifyContent: 'space-between',\n      transition: 'common',\n      _hover: {\n        background: 'gray.subtle.bg',\n      },\n      _highlighted: {\n        background: 'gray.subtle.bg',\n      },\n      _selected: {},\n      _disabled: {\n        layerStyle: 'disabled',\n      },\n    },\n    itemGroupLabel: {\n      textStyle: 'label',\n    },\n    itemIndicator: {\n      color: 'colorPalette.plain.fg',\n    },\n    indicatorGroup: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      gap: '1',\n      pos: 'absolute',\n      insetEnd: '0',\n      top: '0',\n      bottom: '0',\n    },\n    trigger: {\n      color: 'fg.subtle',\n    },\n    clearTrigger: {\n      color: 'fg.muted',\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      color: 'fg.subtle',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n    variant: 'outline',\n  },\n  variants: {\n    variant: {\n      outline: {\n        input: {\n          borderWidth: '1px',\n          borderColor: 'gray.outline.border',\n          focusVisibleRing: 'inside',\n          focusRingColor: 'colorPalette.solid.bg',\n          _invalid: {\n            focusRingColor: 'red.9',\n            borderColor: 'red.9',\n          },\n        },\n      },\n      surface: {\n        input: {\n          bg: 'gray.surface.bg',\n          borderWidth: '1px',\n          borderColor: 'gray.surface.border',\n          focusVisibleRing: 'inside',\n          focusRingColor: 'colorPalette.solid.bg',\n          _invalid: {\n            focusRingColor: 'red.9',\n            borderColor: 'red.9',\n          },\n        },\n      },\n      subtle: {\n        input: {\n          borderWidth: '1px',\n          borderColor: 'transparent',\n          bg: 'gray.subtle.bg',\n          color: 'gray.subtle.fg',\n          focusVisibleRing: 'inside',\n          focusRingColor: 'colorPalette.solid.bg',\n          _invalid: {\n            focusRingColor: 'red.9',\n            borderColor: 'red.9',\n          },\n        },\n      },\n    },\n    size: {\n      xs: {\n        input: { '--combobox-input-height': 'sizes.8', textStyle: 'sm', px: '2' },\n        content: { p: '1', gap: '1', textStyle: 'sm' },\n        indicatorGroup: { px: '2', _icon: { boxSize: '3.5' } },\n        item: { px: '1', minH: '9', _icon: { boxSize: '3.5' } },\n        empty: { px: '1', minH: '9' },\n      },\n      sm: {\n        input: { '--combobox-input-height': 'sizes.9', textStyle: 'sm', px: '2.5' },\n        content: { p: '1', gap: '1', textStyle: 'sm' },\n        indicatorGroup: { px: '2.5', _icon: { boxSize: '4' } },\n        item: { px: '1.5', minH: '9', _icon: { boxSize: '4' } },\n        empty: { px: '1.5', minH: '9' },\n      },\n      md: {\n        input: { '--combobox-input-height': 'sizes.10', textStyle: 'md', px: '3' },\n        content: { p: '1', gap: '1', textStyle: 'md' },\n        indicatorGroup: { px: '3', _icon: { boxSize: '4.5' } },\n        item: { px: '2', minH: '10', _icon: { boxSize: '4.5' } },\n        empty: { px: '2', minH: '10' },\n      },\n      lg: {\n        input: { '--combobox-input-height': 'sizes.11', textStyle: 'md', px: '3.5' },\n        content: { p: '1', gap: '1', textStyle: 'md' },\n        indicatorGroup: { px: '3.5', _icon: { boxSize: '5' } },\n        item: { px: '2.5', minH: '11', _icon: { boxSize: '5' } },\n        empty: { px: '2.5', minH: '11' },\n      },\n      xl: {\n        input: { '--combobox-input-height': 'sizes.12', textStyle: 'lg', px: '4' },\n        content: { p: '1', gap: '1', textStyle: 'lg' },\n        indicatorGroup: { px: '4', _icon: { boxSize: '5' } },\n        item: { px: '3', minH: '12', _icon: { boxSize: '5' } },\n        empty: { px: '3', minH: '12' },\n      },\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./combobox",
            "symbols": [
              {
                "name": "combobox"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "combobox"
              }
            ]
          }
        ]
      }
    }
  ]
}