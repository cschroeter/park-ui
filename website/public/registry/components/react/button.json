{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "button",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "button.tsx",
      "content": "'use client'\n\nimport { ark } from '@ark-ui/react/factory'\nimport { type ComponentProps, forwardRef } from 'react'\nimport { styled } from 'styled-system/jsx'\nimport { button } from 'styled-system/recipes'\nimport { Loader } from './loader'\n\nexport interface ButtonLoadingProps {\n  /**\n   * If `true`, the button will show a loading spinner.\n   * @default false\n   */\n  loading?: boolean | undefined\n  /**\n   * The text to show while loading.\n   */\n  loadingText?: React.ReactNode | undefined\n  /**\n   * The spinner to show while loading.\n   */\n  spinner?: React.ReactNode | undefined\n  /**\n   * The placement of the spinner\n   * @default \"start\"\n   */\n  spinnerPlacement?: 'start' | 'end' | undefined\n}\n\ntype BaseButtonProps = ComponentProps<typeof BaseButton>\nconst BaseButton = styled(ark.button, button)\n\nexport interface ButtonProps extends BaseButtonProps, ButtonLoadingProps {}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(function Button(props, ref) {\n  const { loading, loadingText, children, spinner, spinnerPlacement, ...rest } = props\n  return (\n    <BaseButton\n      type=\"button\"\n      ref={ref}\n      {...rest}\n      data-loading={loading ? '' : undefined}\n      disabled={loading || rest.disabled}\n    >\n      {!props.asChild && loading ? (\n        <Loader spinner={spinner} text={loadingText} spinnerPlacement={spinnerPlacement}>\n          {children}\n        </Loader>\n      ) : (\n        children\n      )}\n    </BaseButton>\n  )\n})\n",
      "indexFile": {
        "exports": [
          {
            "type": "named",
            "symbols": [
              {
                "name": "Button",
                "isType": false
              },
              {
                "name": "ButtonProps",
                "isType": true
              }
            ],
            "moduleSpecifier": "./button"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "button.ts",
      "content": "import { defineRecipe } from '@pandacss/dev'\n\nexport const button = defineRecipe({\n  className: 'button',\n  jsx: ['Button', 'IconButton', 'CloseButton'],\n  base: {\n    alignItems: 'center',\n    appearance: 'none',\n    borderRadius: 'l2',\n    cursor: 'pointer',\n    display: 'inline-flex',\n    flexShrink: '0',\n    fontWeight: 'semibold',\n    isolation: 'isolate',\n    justifyContent: 'center',\n    outline: '0',\n    position: 'relative',\n    transition: 'common',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    whiteSpace: 'nowrap',\n    _icon: {\n      flexShrink: '0',\n      fontSize: '1.1em',\n      width: '1.1em',\n      height: '1.1em',\n    },\n    _disabled: {\n      layerStyle: 'disabled',\n    },\n    focusVisibleRing: 'outside',\n    focusRingColor: 'colorPalette.solid.bg',\n  },\n  defaultVariants: {\n    variant: 'solid',\n    size: 'md',\n  },\n  variants: {\n    variant: {\n      solid: {\n        layerStyle: 'solid.interactive',\n      },\n      surface: {\n        layerStyle: 'surface.interactive',\n      },\n      subtle: {\n        layerStyle: 'subtle.interactive',\n      },\n      outline: {\n        layerStyle: 'outline.interactive',\n      },\n      plain: {\n        layerStyle: 'plain.interactive',\n      },\n    },\n    size: {\n      xs: {\n        h: '8',\n        minW: '8',\n        textStyle: 'xs',\n        px: '3',\n        gap: '2',\n      },\n      sm: {\n        h: '9',\n        minW: '9',\n        textStyle: 'sm',\n        px: '3.5',\n        gap: '2',\n      },\n      md: {\n        h: '10',\n        minW: '10',\n        textStyle: 'sm',\n        px: '4',\n        gap: '2',\n      },\n      lg: {\n        h: '11',\n        minW: '11',\n        textStyle: 'md',\n        px: '4.5',\n        gap: '2',\n      },\n      xl: {\n        h: '12',\n        minW: '12',\n        textStyle: 'md',\n        px: '5',\n        gap: '2.5',\n      },\n      '2xl': {\n        h: '16',\n        minW: '16',\n        textStyle: 'lg',\n        px: '7',\n        gap: '3',\n      },\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./button",
            "symbols": [
              {
                "name": "button"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "recipes",
            "properties": [
              {
                "name": "button"
              }
            ]
          }
        ]
      }
    }
  ]
}