{
  "$schema": "https://next.park-ui.com/schema/registry-item.json",
  "id": "toast",
  "type": "component",
  "files": [
    {
      "type": "component",
      "fileName": "toast.tsx",
      "content": "'use client'\nimport { Portal } from '@ark-ui/react/portal'\nimport { Toaster as ArkToaster, createToaster, Toast, useToastContext } from '@ark-ui/react/toast'\nimport { CheckCircleIcon, CircleAlertIcon, CircleXIcon } from 'lucide-react'\nimport { forwardRef } from 'react'\nimport { createStyleContext, Stack, styled } from 'styled-system/jsx'\nimport { toast } from 'styled-system/recipes'\nimport { CloseButton } from './close-button'\nimport { Icon, type IconProps } from './icon'\nimport { Spinner } from './spinner'\n\nconst { withProvider, withContext } = createStyleContext(toast)\n\nconst Root = withProvider(Toast.Root, 'root')\nconst Title = withContext(Toast.Title, 'title')\nconst Description = withContext(Toast.Description, 'description')\nconst ActionTrigger = withContext(Toast.ActionTrigger, 'actionTrigger')\nconst CloseTrigger = withContext(Toast.CloseTrigger, 'closeTrigger')\nconst StyledToaster = styled(ArkToaster)\n\nconst iconMap: Record<string, React.ElementType> = {\n  warning: CircleAlertIcon,\n  success: CheckCircleIcon,\n  error: CircleXIcon,\n}\n\nconst Indicator = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\n  const toast = useToastContext()\n\n  const StatusIcon = iconMap[toast.type]\n  if (!StatusIcon) return null\n\n  return (\n    <Icon ref={ref} data-type={toast.type} {...props}>\n      <StatusIcon />\n    </Icon>\n  )\n})\n\nexport const toaster = createToaster({\n  placement: 'bottom-end',\n  pauseOnPageIdle: true,\n  overlap: true,\n  max: 5,\n})\n\nexport const Toaster = () => {\n  return (\n    <Portal>\n      <StyledToaster toaster={toaster} insetInline={{ mdDown: '4' }}>\n        {(toast) => (\n          <Root>\n            {toast.type === 'loading' ? <Spinner color=\"colorPalette.plain.fg\" /> : <Indicator />}\n\n            <Stack gap=\"3\" alignItems=\"start\">\n              <Stack gap=\"1\">\n                {toast.title && <Title>{toast.title}</Title>}\n                {toast.description && <Description>{toast.description}</Description>}\n              </Stack>\n              {toast.action && <ActionTrigger>{toast.action.label}</ActionTrigger>}\n            </Stack>\n            {toast.closable && (\n              <CloseTrigger asChild>\n                <CloseButton size=\"sm\" />\n              </CloseTrigger>\n            )}\n          </Root>\n        )}\n      </StyledToaster>\n    </Portal>\n  )\n}\n",
      "indexFile": {
        "exports": [
          {
            "type": "named",
            "symbols": [
              {
                "name": "Toaster",
                "isType": false
              },
              {
                "name": "toaster",
                "isType": false
              }
            ],
            "moduleSpecifier": "./toast"
          }
        ]
      }
    },
    {
      "type": "recipe",
      "fileName": "toast.ts",
      "content": "import { toastAnatomy } from '@ark-ui/react/toast'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const toast = defineSlotRecipe({\n  className: 'toast',\n  slots: toastAnatomy.keys(),\n  base: {\n    root: {\n      alignItems: 'start',\n      background: 'bg.default',\n      borderRadius: 'l3',\n      boxShadow: 'lg',\n      display: 'flex',\n      gap: '4',\n      height: 'var(--height)',\n      minWidth: 'sm',\n      opacity: 'var(--opacity)',\n      overflowWrap: 'anywhere',\n      p: '4',\n      position: 'relative',\n      scale: 'var(--scale)',\n      transitionDuration: 'slow',\n      transitionProperty: 'translate, scale, opacity, height',\n      transitionTimingFunction: 'default',\n      translate: 'var(--x) var(--y)',\n      width: 'full',\n      willChange: 'translate, opacity, scale',\n      zIndex: 'var(--z-index)',\n    },\n    title: {\n      color: 'fg.default',\n      fontWeight: 'medium',\n      textStyle: 'sm',\n    },\n    description: {\n      color: 'fg.muted',\n      textStyle: 'sm',\n    },\n    actionTrigger: {\n      color: 'colorPalette.plain.fg',\n      cursor: 'pointer',\n      fontWeight: 'semibold',\n      textStyle: 'sm',\n    },\n    closeTrigger: {\n      position: 'absolute',\n      top: '2',\n      insetEnd: '2',\n    },\n  },\n})\n",
      "indexFile": {
        "imports": [
          {
            "type": "named",
            "moduleSpecifier": "./toast",
            "symbols": [
              {
                "name": "toast"
              }
            ]
          }
        ],
        "exports": [
          {
            "type": "object-literal",
            "variableName": "slotRecipes",
            "properties": [
              {
                "name": "toast"
              }
            ]
          }
        ]
      }
    }
  ]
}