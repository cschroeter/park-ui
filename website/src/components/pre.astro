---
import { Code } from 'astro/components'
import * as cheerio from 'cheerio'
import { Box } from 'styled-system/jsx'
import { P, match } from 'ts-pattern'
import { reactToSolid } from '~/lib/react-to-solid'
import { reactToVue } from '~/lib/react-to-vue'
import { CodePreview } from './code-preview'
import { CodePreviewTabs } from './code-preview-tabs'
import { LivePreview } from './live-preview'

const html = await Astro.slots.render('default')
const code = cheerio.load(html).root().text().trim()
---

<Box borderRadius="l3" overflow="hidden" borderWidth="1px" className="not-prose">
  {
    match(html)
      .with(P.string.includes('metastring="live multi"'), () => (
        <>
          <Box p={{ base: '4', md: '6' }} borderBottomWidth="1px">
            <LivePreview code={code} client:load />
          </Box>
          <CodePreviewTabs
            tabs={{
              react: { label: 'React', code: code },
              solid: { label: 'Solid', code: reactToSolid(code) },
              vue: { label: 'Vue', code: reactToVue(code) },
            }}
            expandable
            client:load
          >
            <Code code={code} lang="tsx" theme="css-variables" slot="react" />
            <Code code={reactToSolid(code)} lang="tsx" theme="css-variables" slot="solid" />
            <Code code={reactToVue(code)} lang="tsx" theme="css-variables" slot="vue" />
          </CodePreviewTabs>
        </>
      ))
      .with(P.string.includes('metastring="live"'), () => (
        <>
          <Box p={{ base: '4', md: '6' }} borderBottomWidth="1px">
            <LivePreview code={code} client:load />
          </Box>
          <CodePreview code={code} client:load>
            <Code code={code} lang="tsx" theme="css-variables" />
          </CodePreview>
        </>
      ))
      .with(P.string.includes('metastring="multi"'), () => (
        <CodePreviewTabs
          tabs={{
            react: { label: 'React', code: code },
            solid: { label: 'Solid', code: reactToSolid(code) },
            vue: { label: 'Vue', code: reactToVue(code) },
          }}
          client:load
        >
          <Code code={code} lang="tsx" theme="css-variables" slot="react" />
          <Code code={reactToSolid(code)} lang="tsx" theme="css-variables" slot="solid" />
          <Code code={reactToVue(code)} lang="tsx" theme="css-variables" slot="vue" />
        </CodePreviewTabs>
      ))
      .otherwise(() => (
        <CodePreview code={code} client:load>
          <Code code={code} lang="tsx" theme="css-variables" />
        </CodePreview>
      ))
  }
</Box>
